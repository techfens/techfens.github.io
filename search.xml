<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>3小时速通ESP32远程图传遥控车，基于MQTT纯4G实现！</title>
      <link href="posts/esp32mqttcar.html"/>
      <url>posts/esp32mqttcar.html</url>
      
        <content type="html"><![CDATA[<h1 id="摸鱼成果展示"><a href="#摸鱼成果展示" class="headerlink" title="摸鱼成果展示"></a>摸鱼成果展示</h1><p>一直摸鱼一直爽，直到有一天我发现我的课设离ddl就剩两天了，瞬间清醒了！</p><p>半天买材料，半天撸代码，然后再花半天组装一下写个报告，哈哈哈还剩半天时间摸个鱼，优化代码那是不可能的，不如给我这个万年不更新的长草站灌点水好了！</p><p>开题给的项目是造一个车，后来嘎嘎造出来之后老师认为太水不给过，必须得加个什么东西，然后就加了个口罩贩卖机在上面，本质上还是完全没区别。。。。</p><p>这个项目更倾向于是一个想法，话不多说，先上个成品 <del>（<em>这就完全就不能算成品好吗！！！</em></del></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=562605215&amp;bvid=BV1nv4y1m78Q&amp;cid=891320957&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><p>项目完全开源，下面是仓库地址，需要自取即可！</p><p>Github  : <a href="https://github.com/techfens/esp32mqttcar">https://github.com/techfens/esp32mqttcar</a></p><p>Gitee  : <a href="https://gitee.com/techfens/esp32mqttcar">https://gitee.com/techfens/esp32mqttcar</a></p><h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><p><img src="https://img.techfens.com/i/static/webconsolefc.png" alt="webconsolefc"></p><p><img src="https://img.techfens.com/i/static/shopconsolefc.png" alt="shopconsolefc"></p><h1 id="硬件选择"><a href="#硬件选择" class="headerlink" title="硬件选择"></a>硬件选择</h1><p>我主要是学嵌入式Linux的，但是做个车也上Linux开发板属实不明智，毕竟最便宜的Linux开发板也要上三位数。</p><p>将图吧精神发扬光大，对于本次硬件的选择，我就两个原则：</p><ul><li><strong>能用就行，极致的省钱！！！</strong></li><li><strong>会用就行，极速的开发！！！</strong></li></ul><p>因此在硬件选择上，直接选择MCU裸机开发就完事了，本次硬件核心就是ESP32+L298N，都是究极无敌成熟的方案，有一点点数电基础就能玩。</p><h2 id="ESP32-CAM"><a href="#ESP32-CAM" class="headerlink" title="ESP32-CAM"></a>ESP32-CAM</h2><p>ESP32-CAM是一个很常见的摄像头模块，本质上是一个ESP32+OV2640摄像头</p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>不出意外的话都是长这个样子：</p><p><img src="https://img.techfens.com/i/static/ESP32CAM.png" alt="ESP32CAM"></p><p>从理论上来说，最好买原厂安信可的板子，但是官方已经下架了，原价60+左右，质量有保证。<strong>淘宝上20几块钱的ESP32-CAM全是寨板，质量比较差，做工粗糙，但是能用</strong>。这次项目我用的就是寨版。</p><p><img src="https://img.techfens.com/i/static/OV2640.png" alt="OV2640"></p><h3 id="I-O引脚"><a href="#I-O引脚" class="headerlink" title="I/O引脚"></a>I/O引脚</h3><p>为了进一步压缩成本，我直接把主控也砍了，毕竟ESP32-CAM本质上也是个ESP32，就没必要再买一个了。ESP32-CAM所有I/O引脚都已经被我霍霍光了，真正的物尽其用！</p><p><img src="https://img.techfens.com/i/static/ESP32CAMGPIO.png" alt="ESP32CAMGPIO"></p><p>其中GPIO 2/12/13/14/15支持PWM输出因此被用于电机驱动相关的设计中，GPIO 4也支持PWM输出，是本设计中灯光（开发板自带）的控制口。GPIO 1/3 做为串行通讯口与电脑进行通信，主要用作开发调试使用，在极致的压榨情况下也可以当I/O口用，但是不方便调试。其他I/O引脚不建议用，容易出事（比如GPIO 0）。</p><p>另外的，GPIO 33是一个比较特殊的口，是用来控制主板上的DEBUG灯的，是一盏红色的小灯，控制逻辑与其他LED相反。</p><h3 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h3><p><strong>着重警告，请务必尊重就近接地，共用接地的原则</strong>，如果你使用3.3v供电，请使用3.3v供电的接地，如果你使用5v供电，请使用5v供电设计，网上的接线图很多都是错的，纯纯误导小白，比如下面这个：（并无恶意，只是提醒）</p><p>图源CSDN：<a href="https://blog.csdn.net/yunddun/article/details/114193859">https://blog.csdn.net/yunddun/article/details/114193859</a></p><p><img src="https://img.techfens.com/i/static/esp32powwrong.png" alt="esp32powwrong"></p><p>也不是说不能用，或许正版安信可原厂的板子是可以的，但是如果你买的寨版，他没给你设置好接地共用，那你等一万年也烧不进去。</p><p>说一句题外话，能用5v尽量就不要用3.3v，电压越高驱动能力越好，实际上他的5v是直连的，理论上来说可以给到12v以内都可以。</p><p>再说一句题外话，能不用下载底板就不要用，USB-TTL才是原汁原味，保证不出问题！</p><h2 id="L298N"><a href="#L298N" class="headerlink" title="L298N"></a>L298N</h2><p>L298N，是一款接受高电压的电机驱动器，直流电机和步进电机都可以驱动。一片驱动芯片可同时控制两个直流减速电机做不同动作，在6V到46V的电压范围内，提供2安培的电流，并且具有过热自断和反馈检测功能。L298N可对电机进行直接控制，通过主控芯片的I/O输入对其控制电平进行设定，就可为电机进行正转反转驱动，操作简单、稳定性好，可以满足直流电机的大电流驱动条件。</p><p><img src="https://img.techfens.com/i/static/L298N.png" alt="L298N"></p><p>我买大概7块钱左右一个，我买的是普通板，有一个散热片。你也可以进一步压榨成本买mini板。</p><p><img src="https://img.techfens.com/i/static/wpsE50.tmp.jpg" alt="img"></p><h2 id="直流减速电机"><a href="#直流减速电机" class="headerlink" title="直流减速电机"></a>直流减速电机</h2><p>我使用的减速电机减速比为1：48，采用直拉双轴减速马达，重量70g，有强磁带扛干扰设计，扭矩大，适合用在有一定负载的小车上做驱动使用。淘宝连电机带轮子7块钱一套左右。</p><p>一点小提示：不要用太粗的线，这样不管你后续接电机还是接L298N都很痛苦，杜邦线那种线径已经完全够用了，你买个0.5mm的红黑线纯属折腾自己。</p><p><img src="https://img.techfens.com/i/static/wpsE1ED.tmp.png" alt="img"></p><h2 id="双供电设计"><a href="#双供电设计" class="headerlink" title="双供电设计"></a>双供电设计</h2><p>在本项目中，一共用到两个电源，一路是稳压5V电源，一路是电机驱动电源。直流电机的启动会导致瞬时电流需求很大，而且电机要求的电压与ESP32不同，如果将电机驱动电源直接与ESP32连接起来，会造成很大的波动和干扰。因此比较简单的解决办法是将电源隔离。</p><p><img src="https://img.techfens.com/i/static/ESP32POWFC.png" alt="ESP32POWFC"></p><p>在5V稳压电源中，我选择的是HW-131电源模块。这是一个很常用的面包板调试电源模块，适用于MB102等大部分面包板。HW-131的输入电压DC 6.5~12V，或者采用USB供电，最大输出电流小于700MA，可以同时输出两路5V/3.3V电源。我自己采用的方案是充电宝+USB输出。</p><p>选择HW-131电源模块是因为本项目中有两个地方需要5V输出，一个是ESP32，一个是售货机电机驱动。ESP32可以通过3.3V或者5V供电，这里选择5V供电，因为摄像头模块对电压要求较高。同时，售货机驱动也使用5V供电，因为售货机相对来说并不是很经常使用，是常闭状态，因此和ESP32公用一个电源是可以接受的。我自己采用的方案是充电宝+USB输出，因为充电宝本身也具有电压稳压输出功能，因此比较适合驱动对电压要求高的项目。<del>（<em>实际上是为了省一个电池钱</em>）</del></p><p><img src="https://img.techfens.com/i/static/HW-131.png" alt="HW-131"></p><p>另一路用到是两个18650串连，电压7.6~8.2v之间，买一个2槽18650盒子就好了，<strong>不要买尖头电池，大部分电池盒都是只能用平头电池！最好买带开关的18650电池盒！</strong></p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="ESP32"><a href="#ESP32" class="headerlink" title="ESP32"></a>ESP32</h2><p>ESP32开发环境比较多选择，主流的有ESP-IDF原生开发（基于C/C++），platfromIO（基于C/C++），Arduino（基于C/C++），Eclpse（基于Java），MircoPython（基于Python）等。综合社区支持以及个人技术栈等因素，我们最终选择了MircoPython作为开发环境。MircoPython相比其他环境最大的特点就是代码免编译，支持面向对象开发，同时语法相对简单，缺点是虽然性能释放远不如C/C++的好，这也是Python这种解释型语言的通病，但是对于本项目来说完全是足够的。</p><p>对于MircoPython，有很多IDE 都支持，比较出名的有Upycraft，Upyloader，Thonny等。本次项目开发主要是使用Thonny开发，基于windows 10 使用。</p><p><img src="https://img.techfens.com/i/static/image-20221110145106940.png" alt="image-20221110145106940"></p><p>好了，客套话说完了，实际上总结下来就是一句：<strong>人生苦短，我用python。</strong></p><p>如果你想认真学习MCU开发，请不要走偏门，老老实实用C++吧！推荐使用platfromIO，这是一个基于vscode的插件，支持完善，代码提示友好，谁用谁知道。</p><p><strong>原版ESP32的MicroPython底包没有Camera依赖，请务必使用我提供的固件！</strong></p><p><strong>原版ESP32的MicroPython底包没有Camera依赖，请务必使用我提供的固件！</strong></p><p><strong>原版ESP32的MicroPython底包没有Camera依赖，请务必使用我提供的固件！</strong></p><h2 id="MQTT协议"><a href="#MQTT协议" class="headerlink" title="MQTT协议"></a>MQTT协议</h2><p>MQTT协议是专门为物联网设备打造的通讯协议，本质上是TCP协议中在应用层的一种实现。是一种基于发布/订阅（publish/subscribe）模式的轻量级通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在机器与机器（M2M）通信，物联网（IoT）等方面有较广泛的应用。</p><p><img src="https://img.techfens.com/i/static/mqttfc.png" alt="mqttfc"></p><p>对于应用层物联网的协议，并不只有MQTT协议，还有基于UDP协议CoAP协议，基于XMP标记语言的XMPP协议等，或者直接采用HTTP轮询的方式也可以实现类似的效果，但是综合了可靠性，实时性，易开发性等特点，最终选择以MQTT协议为核心通讯协议。关于MQTT协议和其他流行的物联网协议选择，可以参考IEEE这篇文章，写的很详细（可能需要科学）：<a href="https://ieeexplore.ieee.org/abstract/document/8088251">https://ieeexplore.ieee.org/abstract/document/8088251</a></p><p>你可能会好奇，普通的websocket不就可以实现遥控功能吗，绕这么一大圈是为了啥？</p><p>事实上websocket是针对长连接环境的，物联网的环境没有这么可靠，很难一直保持良好的长连接。MQTT实际上也是websoket发展来的7层协议（我自己理解的，不一定对），具体可以参考下面的层级图：</p><p><img src="https://img.techfens.com/i/static/mqttcengji.png" alt="mqttcengji"></p><p>使用MQTT最大的好处就是可以在不可靠的环境下提供可靠的连接，有点我全都要的感觉。而且MQTT协议很简洁，非常方便二次开发。</p><p>服务器上我选择用<a href="https://www.emqx.io/">EMQX</a>搭建MQTT环境，网上有很多搭建教程，非常简单。值得注意的是，<a href="https://www.emqx.io/">EMQX</a>对于websocket的支持使用的是路径挂载，如果你需要使用websocket服务连接MQTT服务器，请不要直连8083端口或者1883端口，要使用挂载点的形式访问。比如<code>http://xxx.xxx.xxx.xxx:8083/mqtt</code></p><p><img src="https://img.techfens.com/i/static/mqttserver.png" alt="mqttserver"></p><p>当然，如果你没有服务器，或者完全不想花钱，你也可以使用公共免费的MQTT服务器，比如以下几个：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">然也物联 (国内)</span><br><span class="line">官网地址：http://www.ranye-iot.net</span><br><span class="line">MQTT服务器地址：test.ranye-iot.net</span><br><span class="line">TCP 端口：1883</span><br><span class="line">TCP/TLS 端口：8883</span><br><span class="line"></span><br><span class="line">EMQ（国内）</span><br><span class="line">MQTT服务器地址:broker-cn.emqx.io</span><br><span class="line">TCP 端口:1883</span><br><span class="line">WebSocket 端口:8083</span><br><span class="line">SSL/TLS 端口:8883</span><br><span class="line">WebSocket Secure 端口:8084</span><br><span class="line"></span><br><span class="line">Mosquitto (国外)</span><br><span class="line">官网地址：http://www.mosquitto.org</span><br><span class="line">MQTT服务器地址：test.mosquitto.org</span><br><span class="line">TCP 端口：1883</span><br><span class="line">TCP/TLS 端口：8883</span><br><span class="line">WebSockets 端口：8080</span><br><span class="line">Websocket/TLS 端口：8081</span><br><span class="line"></span><br><span class="line">HiveMQ (国外)</span><br><span class="line">官网地址：https://www.hivemq.com</span><br><span class="line">MQTT服务器地址：broker.hivemq.com</span><br><span class="line">TCP 端口：1883</span><br><span class="line">WebSockets 端口：8000</span><br></pre></td></tr></tbody></table></figure><p>如果你使用公共云，请务必使用有一定复杂度的<code>Client ID</code>，最好遵循命名规则，可以采用user/project/…的形式，举个栗子：<code>zhishixuebao/esp32car/led</code>,<code>zhishixuebao/esp32car/car</code>,<code>zhishixuebao/esp32car/shop</code>。这样也有一个好处，如果你的客户端支持，你可以通过订阅<code>zhishixuebao/esp32car/*</code>来监听整一个项目下的消息了。</p><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><p>由于小车完全使用4G进行远程遥控，因此远端服务器的支持是必不可少的。服务器上主要运行的程序有MQTT通信协议（用于小车控制），websocket服务（用于远程图传），API服务（用于服务对接）。</p><p>本项目用到的服务器是一台位于上海的KVM架构虚拟云服务器（腾讯云），运行的系统是Linux CentOS 7.6。虽然地域位于上海，但是因为有公网IP，在4G网络环境下直连实测下来延迟依然非常不错，在操作层面可以做到几乎与本地通讯相同的体验。</p><p>我个人并不推荐宝塔装环境，因为不是那么安全。但是如果你不想折腾只想耍一耍，那我还是很推荐用宝塔的。</p><p><img src="https://img.techfens.com/i/static/esp32server.png" alt="esp32server"></p><h2 id="上位机环境"><a href="#上位机环境" class="headerlink" title="上位机环境"></a>上位机环境</h2><p>考虑到上位机更多是给用户使用的，因此用户友好的界面是必不可少的，不能只依赖串口通信的日志和控制台进行生产环境的控制。为了尽可能的适应大部分设备的使用环境，选择了Web作为上位机界面开发，不仅有良好的跨设备适用性，同时也能保证大部分人的使用体验是一致的。</p><p>最初的想法是使用动态框架进行开发，这样不仅开发迅速，而且技术栈一致（比如一开始计划用Python的Flask框架开发，可以让整一个项目都处于基于Python的技术内），但是考虑到动态框架依赖环境，迁移环境复杂，而且无法脱离服务器使用，最后使用了纯静态纯前端实现。这样的好处是稳定性极高，不依赖任何环境，缺点是拓展性较差，难以实现复杂的逻辑控制功能。</p><p>本项目所构建的两个上位机程序都是使用Vue.js和MQTT.js开发。区别在于前端样式的不同，请求和接收数据的方式是相同的。Vue.js是目前前端开发中一个非常流行的框架，不管是小程序，APP还是网页都可以开发。在本项目中主要用到Vue.js中两个比较重要的功能，分别是双向数据绑定以及数据代理。通过Vue.js可以很轻松的实现按钮操作和输入框的绑定，并将数据通过MQTT.js发送到ESP32上。</p><p><img src="https://img.techfens.com/i/static/mqttvue.png" alt="mqttvue"></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="ESP32-1"><a href="#ESP32-1" class="headerlink" title="ESP32"></a>ESP32</h2><h3 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h3><p>在MicroPython运行环境下，ESP32从上电开机开始执行文件的顺序如下（以本项目为例子）：</p><p><img src="https://img.techfens.com/i/static/ESP32BOOT.png" alt="ESP32BOOT"></p><p>其中，boot.py是启动文件，开机默认执行，一般用于初始化项目。本项目采用默认配置启动，因此没有修改boot.py文件。</p><p>在启动后会默认进入main.py文件，main.py是主文件，用于控制主要的运行逻辑，线程处理，初始化处理等，并调用其他库的对象和方法。所有的程序最终都会汇集到主程序被调用，包括系统固件依赖库，以及本项目需要的其他文件。</p><p>固件依赖是指常用的依赖包已经在固件中依赖好，属于系统自带的函数库。本项目用到的系统函数库有：usocket，ustruct，ubinascii，machine，time，network，camera，ujson。其中usocket，ustruct是负责处理MQTT消息的依赖库，ubinascii是负责处理与ASCII码字符转义相关的依赖库，machine是定义引脚电平输出、PWM输出和系统控制的依赖库，network是负责网络配置的依赖库，time是负责定时器相关的依赖库，camera是负责摄像头模块相关的依赖库，ujson是处理json数据的依赖库。</p><p><strong>在MicroPython中，很多包都是阉割的，因此都用的是u+包名，比如usocket，ujson。如果你使用了标准包，比如import json ，并不会报错，但是会执行出一堆你不知道发生了什么的东西，个人不建议使用标准包。</strong></p><p>除了固件依赖外，还有mqtt.py，control.py两个文件，是本项目中需要自己编写的对象，将在下面说明。</p><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><p>在main文件中，主要执行ESP32的初始化和控制流程，初始化包括摄像头初始化，网络配置初始化，MQTT通信初始化等。控制流程主要是调用mqtt.py库接收MQTT消息，并通过消息的内容调用control.py内的方法驱动小车硬件。同时具有抓取错误，日志输出，机器保活等功能。以下是一些核心代码，关键部分已使用注释说明：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> machine </span><br><span class="line"><span class="keyword">import</span> network</span><br><span class="line"><span class="keyword">from</span> mqtt <span class="keyword">import</span> MQTTClient</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> camera</span><br><span class="line"><span class="keyword">import</span> ujson</span><br><span class="line"><span class="keyword">import</span> control</span><br><span class="line"></span><br><span class="line">lightvalue = <span class="number">55</span>  <span class="comment"># 初始化灯光亮度</span></span><br><span class="line">speedvalue = <span class="number">50</span>  <span class="comment"># 初始化速度控制</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_connect</span>():</span>  <span class="comment"># 初始化网络</span></span><br><span class="line">    wlan = network.WLAN(network.STA_IF)</span><br><span class="line">    wlan.active(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> wlan.isconnected():</span><br><span class="line">        print(<span class="string">'connecting to network...'</span>)</span><br><span class="line">        wlan.connect(<span class="string">'WIFI_SSID'</span>, <span class="string">'PASSWORD'</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> wlan.isconnected():</span><br><span class="line">            print(<span class="string">"正在链接...{}"</span>.<span class="built_in">format</span>(i))</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'network config:'</span>, wlan.ifconfig())</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_cb</span>(<span class="params">topic, msg</span>):</span>  <span class="comment"># 回调函数，收到服务器消息后会调用这个函数</span></span><br><span class="line">    print(topic, msg)</span><br><span class="line">    <span class="keyword">global</span> lightvalue</span><br><span class="line">    <span class="keyword">global</span> speedvalue</span><br><span class="line">    <span class="keyword">if</span> topic.decode(<span class="string">"utf-8"</span>) == <span class="string">"carctl"</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            setvalue = ujson.loads(msg)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"lightvalue"</span> <span class="keyword">in</span> setvalue:</span><br><span class="line">                lightvalue = setvalue[<span class="string">"lightvalue"</span>]</span><br><span class="line">                print(lightvalue, <span class="string">"灯光亮度"</span>)</span><br><span class="line">                control.led(lightvalue)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"speedvalue"</span> <span class="keyword">in</span> setvalue:</span><br><span class="line">                speedvalue = setvalue[<span class="string">"speedvalue"</span>]</span><br><span class="line">                print(speedvalue, <span class="string">"速度控制"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> msg.decode(<span class="string">"utf-8"</span>) == <span class="string">"forward"</span>:</span><br><span class="line">            control.forward(speedvalue)</span><br><span class="line">        <span class="keyword">elif</span> msg.decode(<span class="string">"utf-8"</span>) == <span class="string">"back"</span>:</span><br><span class="line">            control.back(speedvalue)</span><br><span class="line">        <span class="keyword">elif</span> msg.decode(<span class="string">"utf-8"</span>) == <span class="string">"left"</span>:</span><br><span class="line">            control.left(speedvalue)</span><br><span class="line">        <span class="keyword">elif</span> msg.decode(<span class="string">"utf-8"</span>) == <span class="string">"right"</span>:</span><br><span class="line">            control.right(speedvalue)</span><br><span class="line">        <span class="keyword">elif</span> msg.decode(<span class="string">"utf-8"</span>) == <span class="string">"stop"</span>:</span><br><span class="line">            control.stop()</span><br><span class="line">        <span class="keyword">elif</span> msg.decode(<span class="string">"utf-8"</span>) == <span class="string">"paysuccess"</span>:</span><br><span class="line">            control.paysuccess()</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>():</span></span><br><span class="line">    <span class="comment"># 1. 联网</span></span><br><span class="line">    do_connect()</span><br><span class="line">    <span class="comment"># 2. 实例化MQTT对象</span></span><br><span class="line">    c = MQTTClient(<span class="string">"my_esp32cam"</span>, <span class="string">"150.158.214.32"</span>)  <span class="comment"># 建立一个MQTT客户端</span></span><br><span class="line">    c.set_callback(sub_cb)  <span class="comment"># 设置回调函数</span></span><br><span class="line">    c.connect()  <span class="comment"># 建立连接</span></span><br><span class="line">    c.subscribe(<span class="string">b"carctl"</span>)  <span class="comment"># 监控ledctl这个通道，接收控制命令</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c = connect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:  <span class="comment"># 初始化摄像头</span></span><br><span class="line">    camera.init(<span class="number">0</span>, <span class="built_in">format</span>=camera.JPEG)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    camera.deinit()</span><br><span class="line">    camera.init(<span class="number">0</span>, <span class="built_in">format</span>=camera.JPEG)</span><br><span class="line"><span class="comment"># 其他设置：</span></span><br><span class="line">camera.flip(<span class="number">0</span>)  <span class="comment"># 上翻下翻</span></span><br><span class="line">camera.mirror(<span class="number">1</span>)  <span class="comment"># 左/右</span></span><br><span class="line">camera.framesize(camera.FRAME_HVGA)  <span class="comment"># 分辨率</span></span><br><span class="line">camera.speffect(camera.EFFECT_NONE)  <span class="comment"># 特效</span></span><br><span class="line">camera.whitebalance(camera.WB_HOME)  <span class="comment"># 白平衡</span></span><br><span class="line">camera.saturation(<span class="number">0</span>)  <span class="comment"># 饱和</span></span><br><span class="line">camera.brightness(<span class="number">0</span>)  <span class="comment"># 亮度</span></span><br><span class="line">camera.contrast(<span class="number">0</span>)  <span class="comment"># 对比度</span></span><br><span class="line">camera.quality(<span class="number">10</span>)  <span class="comment"># 质量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># socket UDP 的创建</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span>  <span class="comment"># 主函数入口</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c.check_msg()</span><br><span class="line">        buf = camera.capture()  <span class="comment"># 获取图像数据</span></span><br><span class="line">        s.sendto(buf, (<span class="string">"xxx.xxx.xxx.xxx"</span>, <span class="number">5904</span>))  <span class="comment"># 向服务器发送图像数据</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">30</span>:</span><br><span class="line">            <span class="keyword">if</span> c.ping() <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print(<span class="string">"alive"</span>)</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:  <span class="comment"># 错误执行并重载</span></span><br><span class="line">    main()</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Failed to connect to MQTT broker. Reconnecting...'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    machine.reset()</span><br><span class="line">    do_connect()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    main()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    camera.deinit()</span><br></pre></td></tr></tbody></table></figure><h3 id="mqtt-py"><a href="#mqtt-py" class="headerlink" title="mqtt.py"></a>mqtt.py</h3><p>这是一个专门处理MQTT消息的方法，包括实例化网络对象，创建socket服务，定义端口，判断MQTT消息类型，心跳保持和遗嘱消息等。主函数通过调用该文件下的MQTTClient类，执行与MQTT消息相关的操作。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> usocket <span class="keyword">as</span> socket</span><br><span class="line"><span class="keyword">import</span> ustruct <span class="keyword">as</span> struct</span><br><span class="line"><span class="keyword">from</span> ubinascii <span class="keyword">import</span> hexlify</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MQTTException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MQTTClient</span>:</span> <span class="comment"># MQTT对象默认配置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        self,</span></span></span><br><span class="line"><span class="function"><span class="params">        client_id,</span></span></span><br><span class="line"><span class="function"><span class="params">        server,</span></span></span><br><span class="line"><span class="function"><span class="params">        port=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        user=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        password=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        keepalive=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        ssl=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        ssl_params={},</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>):</span></span><br><span class="line">        <span class="keyword">if</span> port == <span class="number">0</span>: <span class="comment"># 如果你的服务器端口不是这两个 请修改</span></span><br><span class="line">            port = <span class="number">8883</span> <span class="keyword">if</span> ssl <span class="keyword">else</span> <span class="number">1883</span></span><br><span class="line">        self.client_id = client_id</span><br><span class="line">        self.sock = <span class="literal">None</span></span><br><span class="line">        self.server = server</span><br><span class="line">        self.port = port</span><br><span class="line">        self.ssl = ssl</span><br><span class="line">        self.ssl_params = ssl_params</span><br><span class="line">        self.pid = <span class="number">0</span></span><br><span class="line">        self.cb = <span class="literal">None</span></span><br><span class="line">        self.user = user</span><br><span class="line">        self.pswd = password</span><br><span class="line">        self.keepalive = keepalive</span><br><span class="line">        self.lw_topic = <span class="literal">None</span></span><br><span class="line">        self.lw_msg = <span class="literal">None</span></span><br><span class="line">        self.lw_qos = <span class="number">0</span></span><br><span class="line">        self.lw_retain = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send_str</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        self.sock.write(struct.pack(<span class="string">"!H"</span>, <span class="built_in">len</span>(s)))</span><br><span class="line">        self.sock.write(s)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recv_len</span>(<span class="params">self</span>):</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        sh = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            b = self.sock.read(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            n |= (b &amp; <span class="number">0x7F</span>) &lt;&lt; sh</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> b &amp; <span class="number">0x80</span>:</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line">            sh += <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_callback</span>(<span class="params">self, f</span>):</span></span><br><span class="line">        self.cb = f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_last_will</span>(<span class="params">self, topic, msg, retain=<span class="literal">False</span>, qos=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= qos &lt;= <span class="number">2</span></span><br><span class="line">        <span class="keyword">assert</span> topic</span><br><span class="line">        self.lw_topic = topic</span><br><span class="line">        self.lw_msg = msg</span><br><span class="line">        self.lw_qos = qos</span><br><span class="line">        self.lw_retain = retain</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self, clean_session=<span class="literal">True</span></span>):</span></span><br><span class="line">        self.sock = socket.socket()</span><br><span class="line">        addr = socket.getaddrinfo(self.server, self.port)[<span class="number">0</span>][-<span class="number">1</span>]</span><br><span class="line">        self.sock.connect(addr)</span><br><span class="line">        <span class="keyword">if</span> self.ssl:</span><br><span class="line">            <span class="keyword">import</span> ussl</span><br><span class="line"></span><br><span class="line">            self.sock = ussl.wrap_socket(self.sock, **self.ssl_params)</span><br><span class="line">        premsg = <span class="built_in">bytearray</span>(<span class="string">b"\x10\0\0\0\0\0"</span>)</span><br><span class="line">        msg = <span class="built_in">bytearray</span>(<span class="string">b"\x04MQTT\x04\x02\0\0"</span>)</span><br><span class="line"></span><br><span class="line">        sz = <span class="number">10</span> + <span class="number">2</span> + <span class="built_in">len</span>(self.client_id)</span><br><span class="line">        msg[<span class="number">6</span>] = clean_session &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            sz += <span class="number">2</span> + <span class="built_in">len</span>(self.user) + <span class="number">2</span> + <span class="built_in">len</span>(self.pswd)</span><br><span class="line">            msg[<span class="number">6</span>] |= <span class="number">0xC0</span></span><br><span class="line">        <span class="keyword">if</span> self.keepalive:</span><br><span class="line">            <span class="keyword">assert</span> self.keepalive &lt; <span class="number">65536</span></span><br><span class="line">            msg[<span class="number">7</span>] |= self.keepalive &gt;&gt; <span class="number">8</span></span><br><span class="line">            msg[<span class="number">8</span>] |= self.keepalive &amp; <span class="number">0x00FF</span></span><br><span class="line">        <span class="keyword">if</span> self.lw_topic:</span><br><span class="line">            sz += <span class="number">2</span> + <span class="built_in">len</span>(self.lw_topic) + <span class="number">2</span> + <span class="built_in">len</span>(self.lw_msg)</span><br><span class="line">            msg[<span class="number">6</span>] |= <span class="number">0x4</span> | (self.lw_qos &amp; <span class="number">0x1</span>) &lt;&lt; <span class="number">3</span> | (self.lw_qos &amp; <span class="number">0x2</span>) &lt;&lt; <span class="number">3</span></span><br><span class="line">            msg[<span class="number">6</span>] |= self.lw_retain &lt;&lt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> sz &gt; <span class="number">0x7F</span>:</span><br><span class="line">            premsg[i] = (sz &amp; <span class="number">0x7F</span>) | <span class="number">0x80</span></span><br><span class="line">            sz &gt;&gt;= <span class="number">7</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        premsg[i] = sz</span><br><span class="line"></span><br><span class="line">        self.sock.write(premsg, i + <span class="number">2</span>)</span><br><span class="line">        self.sock.write(msg)</span><br><span class="line">        <span class="comment"># print(hex(len(msg)), hexlify(msg, ":"))</span></span><br><span class="line">        self._send_str(self.client_id)</span><br><span class="line">        <span class="keyword">if</span> self.lw_topic:</span><br><span class="line">            self._send_str(self.lw_topic)</span><br><span class="line">            self._send_str(self.lw_msg)</span><br><span class="line">        <span class="keyword">if</span> self.user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._send_str(self.user)</span><br><span class="line">            self._send_str(self.pswd)</span><br><span class="line">        resp = self.sock.read(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">assert</span> resp[<span class="number">0</span>] == <span class="number">0x20</span> <span class="keyword">and</span> resp[<span class="number">1</span>] == <span class="number">0x02</span></span><br><span class="line">        <span class="keyword">if</span> resp[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> MQTTException(resp[<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">return</span> resp[<span class="number">2</span>] &amp; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">disconnect</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sock.write(<span class="string">b"\xe0\0"</span>)</span><br><span class="line">        self.sock.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sock.write(<span class="string">b"\xc0\0"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publish</span>(<span class="params">self, topic, msg, retain=<span class="literal">False</span>, qos=<span class="number">0</span></span>):</span></span><br><span class="line">        pkt = <span class="built_in">bytearray</span>(<span class="string">b"\x30\0\0\0"</span>)</span><br><span class="line">        pkt[<span class="number">0</span>] |= qos &lt;&lt; <span class="number">1</span> | retain</span><br><span class="line">        sz = <span class="number">2</span> + <span class="built_in">len</span>(topic) + <span class="built_in">len</span>(msg)</span><br><span class="line">        <span class="keyword">if</span> qos &gt; <span class="number">0</span>:</span><br><span class="line">            sz += <span class="number">2</span></span><br><span class="line">        <span class="keyword">assert</span> sz &lt; <span class="number">2097152</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> sz &gt; <span class="number">0x7F</span>:</span><br><span class="line">            pkt[i] = (sz &amp; <span class="number">0x7F</span>) | <span class="number">0x80</span></span><br><span class="line">            sz &gt;&gt;= <span class="number">7</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        pkt[i] = sz</span><br><span class="line">        <span class="comment"># print(hex(len(pkt)), hexlify(pkt, ":"))</span></span><br><span class="line">        self.sock.write(pkt, i + <span class="number">1</span>)</span><br><span class="line">        self._send_str(topic)</span><br><span class="line">        <span class="keyword">if</span> qos &gt; <span class="number">0</span>:</span><br><span class="line">            self.pid += <span class="number">1</span></span><br><span class="line">            pid = self.pid</span><br><span class="line">            struct.pack_into(<span class="string">"!H"</span>, pkt, <span class="number">0</span>, pid)</span><br><span class="line">            self.sock.write(pkt, <span class="number">2</span>)</span><br><span class="line">        self.sock.write(msg)</span><br><span class="line">        <span class="keyword">if</span> qos == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                op = self.wait_msg()</span><br><span class="line">                <span class="keyword">if</span> op == <span class="number">0x40</span>:</span><br><span class="line">                    sz = self.sock.read(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">assert</span> sz == <span class="string">b"\x02"</span></span><br><span class="line">                    rcv_pid = self.sock.read(<span class="number">2</span>)</span><br><span class="line">                    rcv_pid = rcv_pid[<span class="number">0</span>] &lt;&lt; <span class="number">8</span> | rcv_pid[<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">if</span> pid == rcv_pid:</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> qos == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subscribe</span>(<span class="params">self, topic, qos=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="keyword">assert</span> self.cb <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">"Subscribe callback is not set"</span></span><br><span class="line">        pkt = <span class="built_in">bytearray</span>(<span class="string">b"\x82\0\0\0"</span>)</span><br><span class="line">        self.pid += <span class="number">1</span></span><br><span class="line">        struct.pack_into(<span class="string">"!BH"</span>, pkt, <span class="number">1</span>, <span class="number">2</span> + <span class="number">2</span> + <span class="built_in">len</span>(topic) + <span class="number">1</span>, self.pid)</span><br><span class="line">        <span class="comment"># print(hex(len(pkt)), hexlify(pkt, ":"))</span></span><br><span class="line">        self.sock.write(pkt)</span><br><span class="line">        self._send_str(topic)</span><br><span class="line">        self.sock.write(qos.to_bytes(<span class="number">1</span>, <span class="string">"little"</span>))</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            op = self.wait_msg()</span><br><span class="line">            <span class="keyword">if</span> op == <span class="number">0x90</span>:</span><br><span class="line">                resp = self.sock.read(<span class="number">4</span>)</span><br><span class="line">                <span class="comment"># print(resp)</span></span><br><span class="line">                <span class="keyword">assert</span> resp[<span class="number">1</span>] == pkt[<span class="number">2</span>] <span class="keyword">and</span> resp[<span class="number">2</span>] == pkt[<span class="number">3</span>]</span><br><span class="line">                <span class="keyword">if</span> resp[<span class="number">3</span>] == <span class="number">0x80</span>:</span><br><span class="line">                    <span class="keyword">raise</span> MQTTException(resp[<span class="number">3</span>])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait_msg</span>(<span class="params">self</span>):</span> <span class="comment">#等待单个传入的MQTT消息并对其进行处理。</span></span><br><span class="line">        res = self.sock.read(<span class="number">1</span>)</span><br><span class="line">        self.sock.setblocking(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> res == <span class="string">b""</span>:</span><br><span class="line">            <span class="keyword">raise</span> OSError(-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> res == <span class="string">b"\xd0"</span>:  <span class="comment"># PINGRESP</span></span><br><span class="line">            sz = self.sock.read(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">assert</span> sz == <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        op = res[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> op &amp; <span class="number">0xF0</span> != <span class="number">0x30</span>:</span><br><span class="line">            <span class="keyword">return</span> op</span><br><span class="line">        sz = self._recv_len()</span><br><span class="line">        topic_len = self.sock.read(<span class="number">2</span>)</span><br><span class="line">        topic_len = (topic_len[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) | topic_len[<span class="number">1</span>]</span><br><span class="line">        topic = self.sock.read(topic_len)</span><br><span class="line">        sz -= topic_len + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> op &amp; <span class="number">6</span>:</span><br><span class="line">            pid = self.sock.read(<span class="number">2</span>)</span><br><span class="line">            pid = pid[<span class="number">0</span>] &lt;&lt; <span class="number">8</span> | pid[<span class="number">1</span>]</span><br><span class="line">            sz -= <span class="number">2</span></span><br><span class="line">        msg = self.sock.read(sz)</span><br><span class="line">        self.cb(topic, msg)</span><br><span class="line">        <span class="keyword">if</span> op &amp; <span class="number">6</span> == <span class="number">2</span>:</span><br><span class="line">            pkt = <span class="built_in">bytearray</span>(<span class="string">b"\x40\x02\0\0"</span>)</span><br><span class="line">            struct.pack_into(<span class="string">"!H"</span>, pkt, <span class="number">2</span>, pid)</span><br><span class="line">            self.sock.write(pkt)</span><br><span class="line">        <span class="keyword">elif</span> op &amp; <span class="number">6</span> == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_msg</span>(<span class="params">self</span>):</span> <span class="comment">#检查服务可用性并等待消息</span></span><br><span class="line">        self.sock.setblocking(<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self.wait_msg()</span><br></pre></td></tr></tbody></table></figure><h3 id="control-py"><a href="#control-py" class="headerlink" title="control.py"></a>control.py</h3><p>这是一个专门用于控制小车的控制文件，包括定义输出引脚，定义PWM控制波，通过L298N的逻辑IN1~IN4口的电平配置来实现前进后退和制动操作，同时通过PWM波控制使能EN口进行直流电机的调速驱动。同时也驱动商品成功下单后出货的电机流程。</p><p>值得一提的是，由于ESP32-CAM提供的I/O接口十分紧缺，导致小车没有多余的接口安装转向舵机，因此使用左右轮差速的方式进行转弯。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> machine <span class="keyword">import</span> Pin, PWM</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#定义电平控制引脚和PWM控制引脚</span></span><br><span class="line">IO12_INT1 = Pin(<span class="number">12</span>, mode=Pin.OUT)</span><br><span class="line">IO13_INT2 = Pin(<span class="number">13</span>, mode=Pin.OUT)</span><br><span class="line">IO14_INT3 = Pin(<span class="number">14</span>, mode=Pin.OUT)</span><br><span class="line">IO15_INT4 = Pin(<span class="number">15</span>, mode=Pin.OUT)</span><br><span class="line">IO02_PWM1 = Pin(<span class="number">2</span>, mode=Pin.OUT)</span><br><span class="line">IO02_PWM1 = PWM(IO02_PWM1, <span class="number">78125</span>)</span><br><span class="line"><span class="comment">#初始化电平控制引脚和PWM控制引脚</span></span><br><span class="line">IO12_INT1.value(<span class="number">0</span>)</span><br><span class="line">IO13_INT2.value(<span class="number">0</span>)</span><br><span class="line">IO14_INT3.value(<span class="number">0</span>)</span><br><span class="line">IO15_INT4.value(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#定义和初始化LED灯引脚,另一种写法，可供参考</span></span><br><span class="line">led_pwm = PWM(Pin(<span class="number">4</span>))</span><br><span class="line">led_pwm.freq(<span class="number">78125</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">led</span>(<span class="params">lightvalue</span>):</span> <span class="comment">#LED</span></span><br><span class="line">    print(<span class="string">"light"</span>, lightvalue)</span><br><span class="line">    led_pwm.duty(lightvalue * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">speedvalue</span>):</span> <span class="comment">#前进</span></span><br><span class="line">    print(<span class="string">"forward"</span>, speedvalue)</span><br><span class="line">    IO02_PWM1.duty(<span class="number">500</span> + speedvalue * <span class="number">5</span>)</span><br><span class="line">    IO12_INT1.value(<span class="number">0</span>)</span><br><span class="line">    IO13_INT2.value(<span class="number">1</span>)</span><br><span class="line">    IO14_INT3.value(<span class="number">0</span>)</span><br><span class="line">    IO15_INT4.value(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">back</span>(<span class="params">speedvalue</span>):</span> <span class="comment">#后退</span></span><br><span class="line">    print(<span class="string">"back"</span>, speedvalue)</span><br><span class="line">    IO02_PWM1.duty(<span class="number">500</span> + speedvalue * <span class="number">5</span>)</span><br><span class="line">    IO12_INT1.value(<span class="number">1</span>)</span><br><span class="line">    IO13_INT2.value(<span class="number">0</span>)</span><br><span class="line">    IO14_INT3.value(<span class="number">1</span>)</span><br><span class="line">    IO15_INT4.value(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span>(<span class="params">speedvalue</span>):</span> <span class="comment">#左转</span></span><br><span class="line">    print(<span class="string">"left"</span>, speedvalue)</span><br><span class="line">    IO02_PWM1.duty(<span class="number">600</span> + speedvalue)</span><br><span class="line">    IO12_INT1.value(<span class="number">0</span>)</span><br><span class="line">    IO13_INT2.value(<span class="number">1</span>)</span><br><span class="line">    IO14_INT3.value(<span class="number">1</span>)</span><br><span class="line">    IO15_INT4.value(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">right</span>(<span class="params">speedvalue</span>):</span> <span class="comment">#右转</span></span><br><span class="line">    print(<span class="string">"right"</span>, speedvalue)</span><br><span class="line">    IO02_PWM1.duty(<span class="number">600</span> + speedvalue)</span><br><span class="line">    IO12_INT1.value(<span class="number">1</span>)</span><br><span class="line">    IO13_INT2.value(<span class="number">0</span>)</span><br><span class="line">    IO14_INT3.value(<span class="number">0</span>)</span><br><span class="line">    IO15_INT4.value(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>():</span> <span class="comment">#制动</span></span><br><span class="line">    print(<span class="string">"stop"</span>)</span><br><span class="line">    IO12_INT1.value(<span class="number">0</span>)</span><br><span class="line">    IO13_INT2.value(<span class="number">0</span>)</span><br><span class="line">    IO14_INT3.value(<span class="number">0</span>)</span><br><span class="line">    IO15_INT4.value(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paysuccess</span>():</span> <span class="comment">#付款成功</span></span><br><span class="line">    print(<span class="string">"pay success"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1024</span>):</span><br><span class="line">            led_pwm.duty(i)</span><br><span class="line">            time.sleep_ms(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1023</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            led_pwm.duty(i)</span><br><span class="line">            time.sleep_ms(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>有一个小细节，因为电机的驱动需要最低电压，因此PWM调速从0电压开始调是没有意义的。举个栗子，在<code>forward</code>函数里，<code>IO02_PWM1.duty(500 + speedvalue * 5)</code>，500是驱动的最低电压，PWM占空比在0-1023之间，因此对于电机的调速从500-1000是合理的。如果直接采用<code>speedvalue * 10</code>，那么调速低于50将没有意义。</p><p>代码整体风格都是简单粗暴，有时间的话可以优化以下，比如运动中差速转弯之类的。</p><h2 id="websocket图传"><a href="#websocket图传" class="headerlink" title="websocket图传"></a>websocket图传</h2><p>偷懒找了一个大佬写的项目：<a href="https://blog.csdn.net/qq_26700087/article/details/125435597">https://blog.csdn.net/qq_26700087/article/details/125435597</a></p><p>关于如何使用，大佬有详细的教程，你只需要改一下端口就能用，当然不改也行。</p><p>我在这里补充一点点在服务器端部署的小技巧，主要是设置进程防杀。个人非常喜好采用<a href="https://pm2.keymetrics.io/docs/usage/quick-start/">PM2管理器</a>对项目进行监控管理。<a href="https://pm2.keymetrics.io/docs/usage/quick-start/">PM2管理器</a>是开源的基于Node.js的进程管理器，包括守护进程，监控，日志的一整套完整的功能，基本是Node.js应用程序不二的守护进程选择，事实上它并不仅仅可以启动Node.js的程序，也可以守护其他脚本程序（比如本程序），并且带有负载均衡控制，可以实现0秒切换重载服务。</p><p>首先你需停安装<a href="https://pm2.keymetrics.io/docs/usage/quick-start/">PM2管理器</a>，不想折腾的话一键命令就行（需要有Node.js环境），或者直接通过宝塔软件商店安装。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br></pre></td></tr></tbody></table></figure><p>然后你只需要cd到在<code>run.sh</code>文件所在目录，执行下列命令，即可实现进程保活：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./run.sh</span><br><span class="line">pm2 list</span><br><span class="line">pm2 save</span><br></pre></td></tr></tbody></table></figure><p>如果你看到你的终端显示online，那么你就成功了：</p><p><img src="https://img.techfens.com/i/static/image-20221110164506293.png" alt="image-20221110164506293"></p><p>如果你想比较方便的访问日志，你可以这样启动：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./run.sh -o ./logs/out.log -e ./logs/error.log</span><br><span class="line">pm2 list</span><br><span class="line">pm2 save</span><br></pre></td></tr></tbody></table></figure><p>这样你的运行日志将直接保存到当前目录下。</p><p>如果你想查看日志，只需要输入：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 logs run</span><br></pre></td></tr></tbody></table></figure><p>下面是一些常用PM2命令，可供参考。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动进程/应用</span></span><br><span class="line">pm2 start bin/www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名进程/应用</span></span><br><span class="line">pm2 start app.js --name wb123、</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加进程/应用</span></span><br><span class="line">pm2 start bin/www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结束进程/应用</span></span><br><span class="line">pm2 stop www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结束所有进程/应用</span></span><br><span class="line">pm2 stop all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除进程/应用 pm2</span></span><br><span class="line">pm2 delete www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有进程/应用</span></span><br><span class="line">pm2 delete all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有进程/应用</span></span><br><span class="line">pm2 list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个进程/应用具体情况</span></span><br><span class="line">pm2 describe www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看进程/应用的资源消耗情况</span></span><br><span class="line">pm2 monit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看pm2的日志</span></span><br><span class="line">pm2 logs 序号/名称</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若要查看某个进程/应用的日志,使用</span></span><br><span class="line">pm2 logs www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动进程/应用</span></span><br><span class="line">pm2 restart www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动所有进程/应用</span></span><br><span class="line">pm2 restart all</span><br></pre></td></tr></tbody></table></figure><h2 id="上位机"><a href="#上位机" class="headerlink" title="上位机"></a>上位机</h2><p>没有什么比网页作为上位机更省钱的了，成本为0。</p><p>主要采用了vue2作为开发，因为验收问题没有办法使用脚手架开发，直接裸跑了，因此前端写的一坨屎，不具备参考价值。</p><p>这里只展示一下如何连接MQTT服务器的写法，如果你真的想看看完全的项目代码，直接到git仓库下载就行，开箱即用。</p><p>首先引入vue.js和mqtt.js，一个标签就行，详情请参考官网。</p><p>vue2官方文档：<a href="https://v2.cn.vuejs.org/v2/guide/installation.html">https://v2.cn.vuejs.org/v2/guide/installation.html</a></p><p>mqtt.js教程：<a href="https://www.emqx.com/zh/blog/mqtt-js-tutorial">https://www.emqx.com/zh/blog/mqtt-js-tutorial</a></p><p>vue中使用mqtt教程：<a href="https://www.emqx.com/zh/blog/how-to-use-mqtt-in-vue">https://www.emqx.com/zh/blog/how-to-use-mqtt-in-vue</a></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/mqtt.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>创建一个按钮（前进）：</p><p>没有设置长按，这里偷懒了，按下去就是前进，抬起来就是刹车。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"shiny"</span> <span class="attr">id</span>=<span class="string">"forward"</span> <span class="attr">v-on:touchstart</span>=<span class="string">"forward"</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-on:touchend</span>=<span class="string">"stop"</span>&gt;</span>前进 ↑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>创建一个输入框（灯光）：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"lightvalue"</span> <span class="attr">:max</span>=<span class="string">'100'</span> <span class="attr">:min</span>=<span class="string">'0'</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>灯光亮度 0~100%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setLight"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>暴力清除长按复制默认样式，保证按钮按下去不会自己抬起来：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    * {</span><br><span class="line">        <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">        <span class="attribute">-khtml-user-select</span>: none;</span><br><span class="line">        <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">        <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">        <span class="attribute">user-select</span>: none;</span><br><span class="line">    }</span><br><span class="line">&lt;/<span class="selector-tag">style</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>Vue有专门对按钮事件有详细的定义，这只是个demo，真正开发千万别学我这样写，否则你就会知道什么叫暴毙。</strong></p><p>下面是Vue部分，同属于一个<code>script</code>标签。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myVue = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: {</span><br><span class="line">        lightvalue: <span class="string">"50"</span>,</span><br><span class="line">        speedvalue: <span class="string">"55"</span>,</span><br><span class="line">        carControl: {</span><br><span class="line">            status: <span class="number">0</span>,</span><br><span class="line">            client: <span class="literal">null</span>,</span><br><span class="line">            options: {</span><br><span class="line">                url: <span class="string">'ws://xxx.xxx.xxx.xxx:8083/mqtt'</span>,</span><br><span class="line">                topic: <span class="string">'carctl'</span>,</span><br><span class="line">                connectTimeout: <span class="number">5000</span>,</span><br><span class="line">                clientId: <span class="string">'connect_all_esp32_mqtt_led_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">                clean: <span class="literal">false</span>,</span><br><span class="line">                keepAliveInterval: <span class="number">30</span></span><br><span class="line">            },</span><br><span class="line">        },</span><br><span class="line">    },</span><br><span class="line">    methods: { <span class="comment">// 精简了其他方法，大同小异</span></span><br><span class="line">        <span class="function"><span class="title">forward</span>(<span class="params"></span>)</span> {</span><br><span class="line">            <span class="keyword">let</span> status = <span class="string">"forward"</span>;</span><br><span class="line">            <span class="built_in">this</span>.mqttPublish(status);</span><br><span class="line">        },</span><br><span class="line">        <span class="function"><span class="title">stop</span>(<span class="params"></span>)</span> {</span><br><span class="line">            <span class="keyword">let</span> status = <span class="string">"stop"</span>;</span><br><span class="line">            <span class="built_in">this</span>.mqttPublish(status);</span><br><span class="line">        },</span><br><span class="line">        <span class="function"><span class="title">setLight</span>(<span class="params"></span>)</span> {</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"set light"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.lightvalue)</span><br><span class="line">            <span class="keyword">let</span> status = <span class="string">'{"lightvalue": '</span> + <span class="built_in">this</span>.lightvalue + <span class="string">'}'</span></span><br><span class="line">            <span class="built_in">console</span>.log(status)</span><br><span class="line">            <span class="built_in">this</span>.mqttPublish(status);</span><br><span class="line">            alert(<span class="string">"确认提交亮度为："</span> + <span class="built_in">this</span>.lightvalue + <span class="string">"%"</span>);</span><br><span class="line">        },</span><br><span class="line">        <span class="function"><span class="title">mqttPublish</span>(<span class="params">status</span>)</span> {</span><br><span class="line">            <span class="comment">// 向指定topic发送消息，topic要保持一致</span></span><br><span class="line">            <span class="built_in">this</span>.carControl.client.publish(<span class="built_in">this</span>.carControl.options.topic, status.toString(), {</span><br><span class="line">                qos: <span class="number">1</span></span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line">        <span class="function"><span class="title">mqttConf</span>(<span class="params"></span>)</span> {</span><br><span class="line">            <span class="comment">// 链接mqtt</span></span><br><span class="line">            <span class="built_in">this</span>.carControl.client = mqtt.connect(<span class="built_in">this</span>.carControl.options.url, <span class="built_in">this</span>.carControl.options);</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="built_in">this</span>.mqttConf();</span><br><span class="line">    },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
            <tag> MQTT </tag>
            
            <tag> MCU开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万字踩坑日记之：国内外个人云服务器挑选指南及避坑</title>
      <link href="posts/server_selection.html"/>
      <url>posts/server_selection.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>由于个人学习和工作的原因，折腾过不少服务器，既刷过各种矿渣路由器，也整炸掉过几千块钱的物理机，但目前来说，使用最多的还是由各大 IDC 厂商提供的云服务器。</p><p>云服务器最大的优点在于稳定，由专业人员集中运维，但这也是致命的缺点之一，毕竟服务器的控制权都在别人手里，买的时候一不留神就经常踩坑，</p><p>由于国情环境的特殊，国内与国外的云服务器生态差别相当大，因此本文部分内容会对其分开进行介绍。<strong>本文区别国内外服务器的原则是是否需要备案，港澳台乃我国一贯领土，勿杠！</strong></p><p>本文主要介绍的还是主要还是以 VPS（Virtual Private Server 虚拟专用服务器）有关的内容。像独服，FPGA，边缘计算等内容就不在本文中细说。</p><p>本文文末<strong>有</strong>推荐的IDC厂商介绍，但是仅作为个人推荐，无恰饭<del>（其实我也想恰，可惜没有）</del></p><h1 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h1><p>以下的选择都是作为个人或者小型团队的出发点分析的，并不适用于大型项目。</p><p>说白了，<strong>只适用于性价比是第一位的选择。</strong></p><h2 id="项目类型"><a href="#项目类型" class="headerlink" title="项目类型"></a>项目类型</h2><p>一台服务器可以做的事情非常多，性能嘛当然是越高越好，但是由于现实因素的影响（钱包），很难做到全都要。</p><p>首先你要问问自己，<strong>你为什么需要一台服务器？你要拿服务器干什么？</strong></p><p>如果你只是想挂一个小脚本，你大概率不需要买服务器。你完全可以白嫖各大厂商免费提供的云函数，或者直接在路由器以及虚拟机中运行。</p><p>如果你只是想做一个小网站，你也不一定需要买一台服务器。廉价的虚拟主机，甚至是各种免费的静态托管，<code>Github</code>，<code>Heroku</code>，<code>Vercel</code>，<code>Leancloud</code>等云产品都完全可以满足你的需求。</p><p>如果你想用来跑机器学习，那么你应该去买专用的显卡或者租用专业的工作站，服务器并不能胜任你的需求，或者换句话说，你应该是没有这么多钱的。</p><p>如果你只是用来挂个游戏，那么隔壁没有独立IP地址的挂机宝会更适合你，不仅便宜而且配置高。</p><p>……</p><p>是的，以上的内容云服务器都可以胜任，但对你来说都不一定是最优解。那么拥有一台云服务器对你来说，最大的优点是什么？</p><p><strong>最大的优点，是拥有自己独立的IP地址，以及完整的服务控制权限。</strong></p><h2 id="云服务器种类"><a href="#云服务器种类" class="headerlink" title="云服务器种类"></a>云服务器种类</h2><p>主要讨论个人使用的服务器会接触到的种类。大部分都是以经典云为主。（也就是所谓的 VPS ）</p><h3 id="轻量应用服务器"><a href="#轻量应用服务器" class="headerlink" title="轻量应用服务器"></a>轻量应用服务器</h3><p>国内云不知道什么时候衍生出的云产品，<strong>面向单机使用环境，基本无法升降配</strong>。共享性能，开箱即用，价格感动人心。</p><p>个人服务器选择的话，如果没有特殊需求，轻量可以首选。</p><p>缺点是拓展性较弱，基本上告别了游戏服务器和其他各种高负载的服务器应用场景。</p><p><img src="https://img.techfens.com/i/static/20210926211339.png"></p><p>上图是我在腾讯云开的一台轻量，性价比非常高，2核心，4GB内存，8Mpbs带宽的配置只需要 368 / 4年 ，算是十分极限的价格了。（当然是活动价，可遇不可求）。同等配置的经典云怕是要翻10倍价起步。良心云yyds！</p><h3 id="经典云服务器"><a href="#经典云服务器" class="headerlink" title="经典云服务器"></a>经典云服务器</h3><p>与上方的轻量应用服务器差距不大，拓展性稍微更强，稳定性更强，升降配更加具有拓展性，是各大 IDC 厂商主打的产品。</p><p>一般最大的区别在于，<strong>具有100%的性能释放，独享带宽</strong>，对突发任务的处理能力更强一点。</p><p>由于国外几乎没有轻量应用服务器这种奇怪的存在，所以国外 IDC 厂商推出的经典云，大概就是国内轻量的水平。</p><h3 id="弹性伸缩服务器"><a href="#弹性伸缩服务器" class="headerlink" title="弹性伸缩服务器"></a>弹性伸缩服务器</h3><p>可以根据负载动态调整配置的云服务器，对于个人使用而言，性价比不高。除非你需要做小程序，或者开发APP等。</p><h3 id="NAT服务器"><a href="#NAT服务器" class="headerlink" title="NAT服务器"></a>NAT服务器</h3><p>专门用于跑流量的服务器，相比起普通服务器几兆的小水管，动辄几百上千兆的 NAT 服务器就显得十分高性价比。</p><p><strong>但是 NAT 服务器一般只开放个别端口给你使用，你并没有服务器的完整控制权限，当然也不能拿来做网站</strong>。</p><p>一般是用于内网穿透，文件传输等流量业务。</p><h3 id="按时计费服务器"><a href="#按时计费服务器" class="headerlink" title="按时计费服务器"></a>按时计费服务器</h3><p>一般用于搭建测试环境的时候使用。性价比不是很高，但是好处是不需要的时候可以关停，不会继续计费。</p><h3 id="裸金属服务器"><a href="#裸金属服务器" class="headerlink" title="裸金属服务器"></a>裸金属服务器</h3><p>不是脱光衣服的服务器。是物理独立服务器+云的结合产品。</p><p><img src="https://img.techfens.com/i/static/20210923222242.png"></p><p>如果说上面虚拟化的云服务器是一栋公寓，大家公用一套资源，那么裸金属服务器就独栋别墅。晚上再也不怕邻居蹦迪睡不着觉了。</p><p>一般用于游戏服务器等高负载高I/O场景。性价比不一定最高，但是一定是最稳定。</p><h3 id="GPU服务器"><a href="#GPU服务器" class="headerlink" title="GPU服务器"></a>GPU服务器</h3><p>用于深度学习，人脸识别等。科研或工作室专用，个人用户价格劝退。(但是偶尔能白嫖)</p><p><img src="https://img.techfens.com/i/static/image-20210923223251806.png" alt="image-20210923223251806"></p><h1 id="配置选择"><a href="#配置选择" class="headerlink" title="配置选择"></a>配置选择</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>一般来说，服务器追求稳定，CPU的主频不会太高，因此不同厂家的CPU性能的差异在同价位来说，基本上大差不大，如果是个人使用的服务器，基本不用刻意考虑CPU的具体型号。</p><p>一般对CPU的选择，是核心数。比如良心云的标准配置<code>1C2H</code>，指的是单核双线程。这样的配置对于个人服务器来说其实也是够用的。</p><p>对于跑<code>Windows server</code>的服务器，个人建议CPU在2个核心以上。</p><p>得益于虚拟化的技术，实际上大部分IDC厂商都存在超售行为（部分甚至很严重），<strong>一般没有说明性能独享的云服务器，CPU性能都是共享的。</strong>共享性能的服务器是不允许你长期跑高负载的，如果你有长期跑高负载服务的预项，请着重斟酌此项。</p><p>目前占据主要市场的还是 kvm 虚拟化的云服务器，此虚拟化方式的机子，内存和硬盘空间都不能超售，<strong>但是可以超售cpu。</strong></p><p><img src="https://img.techfens.com/i/static/image-20210926213733167.png" alt="image-20210926213733167"></p><p>上图是我一个专门用于刷豆子（青龙面板）的服务器，配置是 1c.2g.1m ，大概挂载十个账号左右。可以看出即便是如此低配置的机器，对于运行小脚本的性能还是有不少溢出的。偶尔有CPU占用100%的情况，这时候考验的就是服务器对突发性能的要求了，但基本不影响使用。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>服务器的内存基本都是ECC内存条，性能不高，但也是胜在稳定。如果是个人使用的服务器，基本不用刻意考虑内存的具体型号与速度。</p><p>一般对内存的选择，还是集中在容量上。理论上当然是越大越好，但那毕竟要加钱嘛。Linux本身对于内存的需求是很低的，但是低于512M内存的服务器就不建议买了，毕竟跑一个docker 或者其他服务就基本占满了。</p><p>对于跑<code>Windows server</code>的服务器，个人建议内存在4GB以上。</p><p>值得注意的是，很多国外的服务器厂商都喜欢设置SWAP内存，<strong>SWAP内存是不算在内存中的。</strong>一般情况下并不需要用到，除非你的内存很小真的不够用。</p><p>容量就是王道，内存没别的，越大越好越大越好越大越好！！！</p><p><img src="https://img.techfens.com/i/static/image-20210926213524465.png" alt="image-20210926213524465"></p><p>上图是我用于搭建某网盘列表程序的服务器，配置是 1c.1g.1m 。大概日均 4K 左右的 PV ，还是没有什么压力的。</p><h2 id="硬盘I-O"><a href="#硬盘I-O" class="headerlink" title="硬盘I/O"></a>硬盘I/O</h2><p>一般的常规的云服务器提供的硬盘都不大，正常情况下硬盘也不会用满。所以硬盘的容量大小不用太纠结。</p><p>服务器的硬盘大部分都是用来安装应用服务以及存放日志的，<strong>服务器的硬盘不是给你用来当网盘用的，尤其是国内的服务器</strong>，静态的资源尽量不要往上面丢，可以选择用对象存储或CDN。</p><p><strong>硬盘的随机读写能力要比连续读写能力重要得多</strong>，所以要谨慎留意是否买到了“石头盘”机器，光有容量但是读写性能极差的垃圾服务器依旧是大有其在，国外服务器此坑相对较多。</p><p>基本所有的IDC厂商对硬盘都有冗余策略，有条件的大厂都使用RAID10作为标配。<strong>这不是一个加分项，而是一个必备项</strong>，如果你购买的服务器不支持硬盘冗余和快照灾备，直接退款就完事。</p><table><thead><tr><th>RAID级别</th><th>最少磁盘要求</th><th>关键优点</th><th>关键缺点</th><th>实际应用场景</th></tr></thead><tbody><tr><td>RAID0</td><td>1块</td><td>读写速度快</td><td>没有任何冗余</td><td>MySQL Slave(数据库的从库)，集群的节点RS</td></tr><tr><td>RAID1</td><td>2块（只能）</td><td>100%冗余，镜像</td><td>读写性能一般，成本高</td><td>单独的，数据很重要，且不能宕机的业务，监控，系统盘</td></tr><tr><td>RAID5</td><td>3块</td><td>具有一定性能和冗余，可以坏一块盘</td><td>写入性能不高</td><td>一般的业务都可以用</td></tr><tr><td>RAID10</td><td>4块</td><td>读写速度很快，100%冗余</td><td>成本高</td><td>性能和冗余要求很好的业务。数据库主库和存储的主节点。</td></tr></tbody></table><p>不出意外，没有特殊说明硬盘也是共享资源，也是不能持续高负载I/O的，甚至很多服务器厂商还会给你的连续读写设限，防止你乱来。</p><p>也有不少厂商系统盘与数据盘是隔离的，这不一定是个加分项。安全性并没有多大提升，但是体验大概率是下降的。</p><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p>对于服务器的带宽，很多人都有很大的误会。</p><p>首先，服务器厂商提供的带宽，基本都是以 Mbps 计算的。比如 1M 的带宽，换算成实际体现是 128KB/s。</p><p>你可能以为服务器的带宽都是很大的，毕竟现在随便一个网页，各种图片视频都是几十兆起步，你甚至可能产生过买一台服务器当自己的云盘的打算。</p><p>但很不幸的是，在国内你会发现大部分你能买得起的服务器带宽都在 10M 以内，甚至很大部分都是 1M，2M 的。带宽不仅低的离谱，甚至是死贵的要命，甚至可以用寸M寸金来形容了。这么低的带宽，真的能用吗？</p><p>实际上，如果你是做网站的，你会发现哪怕是 1M 的小水管，优化做的好，也足以支持日均上万的IP，十万的PV。<strong>服务器是运算中心而不是数据中心</strong>，服务器只负责输出核心的内容即可，内容和资源由对象存储和 CDN 进行分发。这也是为什么基本所有的大型项目都要求前后端分离的原因，因为服务器的带宽真的很值钱。</p><p>当然也有专门用于跑流量服务的 NAT 服务器。这就不属于本文介绍的内容了，NAT 服务器拥有很高的带宽，但是一般只开放个别端口给你使用，你并没有整台服务器的完整控制权限。</p><p>在大多数非流量业务中，<strong>时延，抖动，丢包等指标的重要性都远远高于带宽</strong>，这些都与带宽无任何直接联系，这就是为什么尽管国内的服务器如此拉跨，带宽如此低，我们也不得不选择国内服务器的原因。</p><p>至于国外服务器带宽，一般都给的比较大，但是与线路挂钩，水就深了。我会在后面详细介绍。</p><h2 id="高防"><a href="#高防" class="headerlink" title="高防"></a>高防</h2><p>个人使用的云服务器，无论是国内还是国外，我认为都没有上高防的必要。</p><p>对于国内云，哪怕是裸奔都不怕。毕竟自有国情在此，国外的IP大部分都已经被墙挡干净了，国内也没多少人敢用实名的IP来攻击你。真被盯上了，你那几十一百个G的防御也脆的跟纸一样。</p><p>高防基本上都是恰国内中小企业烂钱的，自己手里有黑名单捂着，不买高防不买清洗机那便是”死得其所”，典型的有今年八月初上线一天的《弈剑行》在被ACCN攻击勒索后，直接被迫停服下线的血压行为。</p><p><img src="https://img.techfens.com/i/static/20210923181934.png" alt="《弈剑行》公开的勒索邮件，攻击者索要一万五千人民币"></p><p><img src="https://img.techfens.com/i/static/359b033b5bb5c9ead23345bbf93a47083bf3b3b6.jpeg" alt="img"></p><p>这么嚣张肆无忌惮的攻击，你要说背后没有厂商默许，我是不信的。毕竟是块大蛋糕，如果你没有做游戏服务器的打算，建议直接躺平。</p><p>至于国外云，选择就更多了。首先是不同国家的机房本身抗压能力就不一样，比如韩国的机房KT等，本身就自带百G的抗压能力。而香港机房的小水管，基本都是一打就死，甚至还会被机房永久拉黑。</p><p>我国的网络安全建设与国外发达地区相比，还是有很大的差距的。比如像<code>Cloudflare</code>这样的大爹，免费计划就可以无限防御 DDoS 攻击，根本不和你算什么流量清洗费用。几个T打过来那都是小场面，家常便饭。<strong>CF能够承受比有史以来最庞大DDos攻击还要强11倍的攻击</strong>。扛D的同时还可以隐藏自己的真实 IP，甚至还自带CDN，全球体验都很好（墙内除外）。</p><p>Cloudflare：五秒盾前，众生平等</p><p><img src="https://img.techfens.com/i/static/13530319-447f39b82af60eb7.png" alt="五秒盾前，众生平等"></p><p>网络攻击不仅仅只有DDOS一种，这世界上没有单靠硬件就能完全防护的机器。对个人服务器来说，相比起被D死的风险，我认为更加要注重服务器的数据安全。</p><h1 id="踩坑雷点"><a href="#踩坑雷点" class="headerlink" title="踩坑雷点"></a>踩坑雷点</h1><h2 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h2><p>备案是国内云服务器绕不开的一个坑。</p><p>在国内，不备案的服务器也是可以使用的，但是一些关键的端口会被禁用，比如<code>80</code>,<code>443</code>等。<strong>不备案的服务器不能被域名解析，也无法搭设网站服务。</strong>但是其他的服务是可以正常使用的，如果你没有做网站的打算，可以不备案。</p><p>当然了，备案的好处多多，可以白嫖免费的CDN，也可以有更高的权重，就是不能拿来干坏事。</p><p>国外的服务器没有限制，无需备案，甚至可以不用实名购买。实际上对于个人服务器来说，香港，韩国等较近区域的服务器与国内服务器的体验是差距不大的，延迟都很低。</p><h2 id="背书"><a href="#背书" class="headerlink" title="背书"></a>背书</h2><p>如果是没有大机房背书的 IDC ，保不准会出现什么提桶跑路的经历（亲身体会）</p><p>一般有名的头部云服务商自然是问题不大，但是也有不少臭鱼烂虾，套了个皮就搁那割韭菜。</p><p>下面是一些国内外已经实锤跑路的 IDC 厂商的一些数据（截至至2021-09）</p><details class="toggle"><summary class="toggle-button" style="">国内外跑路 IDC 厂商</summary><div class="toggle-content"><p>inlicloud (inli.cloud) 注：引力主机已经停运，跑路!</p><p>习梦云 （xmxm.net）注：习梦云商家疑似跑路，机器已失联。</p><p>前海云（szqhcloud.com）注：官方已经正式发布停运公告，快去取数据！</p><p>combcloud (combcloud.net)  注：证实官网打不开，跑路！</p><p>彩虹数据 (chshuju.com) 注：证实官网打不开，跑路！</p><p>戈登云 (godeng.cn) 注：证实官网打不开，跑路！</p><p>桔子vps (vpszi.com) 注：证实官网打不开，跑路！</p><p>比特云 (btcvps.me) 注：证实官网打不开，跑路！</p><p>老六云 (l6ee.com) 注：证实官网打不开，跑路！</p><p>奇维云 (kiver.cn) 注：证实官网打不开，跑路！</p><p>vosent (vosent.com) 注：官网公告停运业务交割，已跑路!</p><p>阁天互联 (xebvr.com) 注：证实官网打不开，跑路！</p><p>Crastar (crastar.cc) 注：证实官网打不开，跑路！</p><p>霓云主机 (rmrf.cloud) 注：证实官网打不开，跑路！</p><p>mansora (mansora.co) 注：官网公告全线停运退款，有机器的赶紧联系吧!</p><p>樊云 (fanyun.com) 注：商家已经失联，路路!</p><p>迅勇科技 (xunyong.net) 注：证实官网打不开，跑路！</p><p>啤啤云 (ppyvps.com) 注：证实官网打不开，跑路！</p><p>excloud (excloud.net) 注：证实官网打不开，跑路！</p><p>kvmloc (kvmloc.com) 注：证实官网打不开，跑路！</p><p>wehostfast (wehostfast.com) 注：证实官网打不开，跑路！</p><p>ownweb (ownweb.co.uk) 注：直接更换了域名和平台，跑路!</p><p>lvps (lvps.net) 注：证实官网打不开，跑路！</p><p>绿洲云 (lzhost.com) 注：证实官网打不开，跑路！</p><p>初忆云 (chuyivps.com) 注：证实官网打不开，跑路！</p><p>汇速云 （huisuyun.cn) 注：证实官网打不开，跑路！</p><p>盛星网络 (shxncloud.cn) 注：证实官网打不开，跑路！</p><p>科云 (kvmserver.net) 注：证实官网打不开，跑路！</p><p>思云数据 (idc.ee) 注：证实官网打不开，跑路！</p><p>孤狼云 (16idc.cn) 注：证实官网打不开，跑路！</p><p>奶兔云 (naituyun.com) 注：证实官网打不开，跑路！</p><p>hklayer (hklayer.com) 注：证实官网打不开，跑路！</p><p>nat.bz (nat.bz) 注：证实官网打不开，跑路！</p><p>情画数据 (633idc.com) 注：证实官网打不开，跑路！</p><p>readydedis (readydedis.com) 注：证实官网打不开，跑路！</p><p>Conoov (conoov.com) 注：证实官网打不开，跑路！</p><p>快快数据 （kuaikuaicdn.com） 注：证实官网打不开，跑路！</p><p>捷睿数据 （jrvps.com）注：证实官网打不开，跑路！</p><p>源云主机 (wenfast.com) 注：已经跑路！</p></div></details><p>国内的好歹还能走走法律途径，碰到国外跑路拔网线的，就只能下楼买个苹果降血压了。</p><p>如果你不清楚这家 IDC 厂商背后有没有大机房背书，可以 google 一下。<strong>（别百度了，真找不到）</strong></p><h2 id="优惠"><a href="#优惠" class="headerlink" title="优惠"></a>优惠</h2><p>国内各大 IDC 厂商的打架力度相当大，对新用户，个人以及学生可以说基本都是赔钱赚吆喝。毕竟自有国情在此，根本不怕你不用。<strong>（但是续费会有大坑）</strong></p><p>尽量不要买小厂子的服务器，毕竟买国内的云很大程度就是奔着完善的售后去的。小厂子的价钱并没有低多少，但是偶尔有奇奇怪怪的坑把你整的血压极高。</p><p><strong>不要相信国内的所谓的免费服务器</strong>，点名批评某丰云，此类企业就是为了套你的个人信息罢了。所谓的免费，就是让你为了那可怜的几天免费续用，写各种臭鱼烂虾软文推广。<strong>反正是免费的，一言不合就删数据，网站被跳转广告，性能还极差。</strong>对国内这些玩意大家心里都明白，免费的才是最贵的。下次看到类似的推广建议直接拉黑。</p><p><img src="https://img.techfens.com/i/static/20210927122622.png"></p><p>国外的 IDC 厂商打架也很厉害，但与国内的垄断情势有所不同，一般都比较少新购优惠，<strong>优惠都是在各大节日放出，比如黑五，圣诞节等等，以优惠机型或者优惠码的形式上架，需要提前蹲点。</strong>一般国外服务器的续费价格都是延续首购的。甚至很多还能白嫖，比如 IBM，甲骨文，谷歌云等。（国外的白嫖云相对良心，但其实也差不多，比如甲骨文白嫖机那只有 1/8 核的性能着实把我震惊了）</p><p>此外，推广返利以及充值返利也是国外IDC厂商促销的主要手段。但考虑到国外的服务器售后麻烦，一般不推荐上头无脑梭哈个几年。</p><h2 id="付款"><a href="#付款" class="headerlink" title="付款"></a>付款</h2><p>国内没啥说的，微信支付宝银行卡。</p><p>国外很多服务器厂商不支持微信和支付宝，如果你想购买，建议提前申请一个 PayPal。（当然现在很多厂商也跟进了）</p><p>有些厂商很鸡贼，偷偷给你开了自动续费，尤其是对于用 PayPal或信用卡购买的，有时候开了自动续费都不知道怎么关，建议购买的时候分辨清楚。</p><p><strong>国外的服务器商即使支持支付宝或者微信购买也不要用，有能力的还是上 PayPal 。</strong>如果是涉及到退款，开票等操作，支付宝和微信人家不认！人家不认！！！可能无法退款！！不要为了一时简便就给自己的售后挖坑！！</p><p>（也不要用比特币支付，除非你买台服务器就不是为了干好事的，虽然保证了全匿名操作，但同时也会对你的售后带来极度不便）</p><h2 id="售后"><a href="#售后" class="headerlink" title="售后"></a>售后</h2><p>国内大厂都不错，出了问题直接加客服，逢年过节还有节日问候，送点小月饼啥的。</p><p>国外一般都是靠发工单和邮件处理，血压高的时候建议下楼买个苹果吃，因为急也没用。另外请收起你的QQ邮箱和蹩脚的中式英语，百度翻译一下不是什么难事，起码要让人家看明白。</p><p>另外国外很多服务器厂家都不支持全天候服务的（ 需要额外购买），甚至很多都是只有周一到周五上班时间才理你。</p><h2 id="抗投诉"><a href="#抗投诉" class="headerlink" title="抗投诉"></a>抗投诉</h2><p>首先，这里一般的投诉指的是同行互踩，或者是部分想干碎你的人。他们可以用个人的形式通过 ip 投诉到机房，这属于一般投诉。</p><p><strong>国内因为有备案的存在，投诉的意义几乎为0，可以直接忽略。</strong>因为不合规的根本连备案都过不了。能过了备案的，自己确实身正不怕影子斜的，无论怎么投诉都对你没影响。</p><p>但是国外的才不管你这么多，收到投诉就给你拔网线，这可比直接黑了你的站方便多了。下面简单介绍一下各类海外抗投诉服务器，主要还是分布在亚洲、美洲、欧洲。</p><p>1、亚洲抗投诉服务器机房<br>亚洲的机房很多，但是真正做到抗投诉的机房只有马来西亚机房，如果用户针对的群体是在国内，可以选择马来西亚服务器。</p><p>2、美洲抗投诉服务器机房<br>美洲机房中最为代表性的为美国机房，这也是国内市场中比较常见的机房，由于美国服务器带宽比较大，而且内容限制比较少，很多人都喜欢租用美国服务器进行仿牌网站等搭建仿牌网站。美国硅谷机房位于美国互联网高速发达的城市洛杉矶，该机房不但抗投诉能力强，而且带宽充足、不限流量、访问速度快。</p><p>3、欧洲抗投诉服务器机房<br>欧洲地区可供选择的抗投诉服务器比较多的，如荷兰服务器、瑞典服务器、立陶宛服务器、拉脱维亚服务器等都可以选择。</p><p>还有一个问题想和大家说清楚：那就是根本不存在有些商家所吹嘘的完全抗投诉的机房，有些服务商在宣传自己的仿牌服务器或抗投诉服务器时，宣城自己“完全不怕投诉，任何的投诉都不予理会”，这个是不存在的。只能是选择相对抗投诉能力强，效果好的服务器来租用。</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP地址也是一个巨大的坑。（国内服务器依然可以忽略本部分）</p><h3 id="被墙IP"><a href="#被墙IP" class="headerlink" title="被墙IP"></a>被墙IP</h3><p><strong>部分IP地址由于上一任机主的滥用，以及被列入墙的黑名单了。</strong>此时你买到的服务器就是个石头，因为你根本连接不上，用来做网站国内的用户也无法访问。</p><p>最简单的解决办法是退款。如果没有办法退款，可以申请更换IP（一般不免费），最差的打算，可能就要套一层 CF 了。</p><h3 id="非固定IP"><a href="#非固定IP" class="headerlink" title="非固定IP"></a>非固定IP</h3><p>部分国外服务器厂商提供给你服务器的 IP 不是固定的，很勾八恶心。如果不慎已经踩了坑，很可能要做好长期动态解析的准备。<em>DDNS</em>（Dynamic Domain Name Server，动态域名服务）</p><h3 id="单IPV6地址"><a href="#单IPV6地址" class="headerlink" title="单IPV6地址"></a>单IPV6地址</h3><p>有些厂商提供 IPv6 Only 的选项，或许会便宜一点，但是目前来说 IPV6 的生态支持仍然不完善，IPV4 对于大部分应用场景仍然是刚性需求。千万不要为了省一点钱就丢弃IPv4地址。</p><h2 id="系统镜像"><a href="#系统镜像" class="headerlink" title="系统镜像"></a>系统镜像</h2><p>所有 IDC 厂商都支持自己选择镜像安装系统，但是镜像不一定全面，不少国外的 IDC 厂商只提供4~5个镜像使用，如果你对系统版本和环境比较挑剔，请记得买之前询问一下支持安装的系统。</p><p><code>Windows Server</code>对硬件有硬性要求，明面上一般都是只受内存限制，实际上CPU和带宽也是限制条件。如果你的带宽少于 3M，远程桌面会卡的你怀疑人生，甚至直接无法使用。</p><h2 id="拥塞处理"><a href="#拥塞处理" class="headerlink" title="拥塞处理"></a>拥塞处理</h2><p>主要用于国内服务器出海，或者出海服务器回国线路的丢包问题。国内服务器如果面向国内使用，可以不做额外配置。</p><p>如果你购买国外的云服务器发现速度很慢，或许是拥塞问题处理的问题。建议切换算法为 <code>BBR</code> 或 <code>BBR 的衍生版本</code>。</p><p>请注意，<strong>此操作涉及系统内核层面，乱改会出事！</strong></p><h3 id="Cubic"><a href="#Cubic" class="headerlink" title="Cubic"></a>Cubic</h3><p>TCP 拥塞控制算法已经持续发展了30多年，主流的拥塞控制算法是基于丢包的，即它们将数据包丢失作为拥塞信号。例如，Linux的默认TCP算法Cubic在遇到数据包丢失时将其拥塞窗口降低了30％。</p><p>Cubic  是传统的 TCP 协议拥塞控制算法。<strong>并不是说传统就不好用</strong>，而是需要视网络实际情况使用。此算法在丢包较少的环境下表现是很不错的，但是如果碰到了一些国外的垃圾机器，网络线路也垃圾，那么使用没有优化过 Cubic 算法那将会丢包丢到你怀疑人生。</p><h3 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a>BBR</h3><p>在某些情况下，基于丢包的TCP算法效果不佳。例如，在浅缓冲区中，数据包丢失可能被误解为网络拥塞，从而导致吞吐量降低和网络利用率降低。另一方面，在较深的缓冲区中，数据包通常要花很长时间才能填满缓冲区。这将导致较高的网络延迟，这称为<strong>缓冲膨胀问题</strong>。</p><p>为了解决此类问题，Google在2016年提出了BBR。BBR不会使用数据包丢失作为拥塞信号，而是根据观察到的带宽和延迟值来调节其流量。具体来说，BBR将其传输中的数据包数量限制为时延带宽积（BDP）的倍数。此外，BBR还使用 pacing来控制数据包之间的间隔。</p><p>重点：</p><ul><li>瓶颈缓冲区大小和时延带宽积（BDP）之间的差异通常指示BBR何时运行良好。在较大的BDP和较浅的缓冲区大小下，BBR可获得更高的吞吐量。</li><li><strong>与Cubic相比，BBR可能导致100倍的数据包重传。</strong></li><li>BBR和Cubic之间的不公平性取决于瓶颈缓冲区的大小—如果缓冲区大小较小（10KB），则BBR可以获取总带宽的90％以上；具有较大的缓冲区大小（10MB），Cubic可获得大约80％的总带宽。</li></ul><p>虽然BBR是为了解决基于丢包的拥塞控制算法的某些问题而提出的，但是这并不意味着在所有的情况下，BBR都比基于丢包的拥塞控制算法有更好的性能。</p><p><img src="https://img.techfens.com/i/static/20210923230803.png"></p><p>橙色节点表示 BBR 获得更高吞吐量的实例，而蓝色节点代表 Cubic 获得更高吞吐量的实例。图中可以观察到，瓶颈缓冲区大小和 BDP 之间的相对差异通常决定了 BBR 何时运行良好-在较小的 BDP 和较深的缓冲区大小下，Cubic 可获得较高的吞吐量，而在较大的BDP和较浅的缓冲区大小下，BBR 可获得较高的吞吐量。更高的产量。</p><p>也就是 BBR 与 CDP 呈现正相关，与缓冲区大小呈现负相关，而 Cubic 恰恰相反。</p><p>BBR 导致的数据包重传比 Cubic 的重传100倍。这表明 BBR 是以浅缓冲区中的高数据包重传为代价提高吞吐量。因此，<strong>如果传递的内容对丢包敏感，那么 BBR 可能不是一个好选择</strong>。</p><p>此外 BBR 也有其他衍生版本，比如 BBR2 , BBR Plus 等等。</p><h3 id="LotServer（锐速）"><a href="#LotServer（锐速）" class="headerlink" title="LotServer（锐速）"></a>LotServer（锐速）</h3><p>LotServer，一款TCP单边加速工具，锐速是其在国内的马甲。解决了之前91云版本的锐速可能因为破解验证机制不完整带来的断流问题。</p><p>适用于Debian, Ubuntu和CentOS，由于其对内核版本有要求，自行安装更换为支持的3.16.0.4或者3.2.0.4内核，其余版本的Linux，我不怎么用，不太熟悉支持的内核版本。</p><p>Linux支持的内核列表：<a href="https://github.com/0oVicero0/serverSpeeder_kernel/blob/master/serverSpeeder.txt">https://github.com/0oVicero0/serverSpeeder_kernel/blob/master/serverSpeeder.txt</a></p><p>此脚本不支持OpenVZ虚拟化的VPS。貌似以及不更新很久了，不推荐使用。</p><h2 id="虚拟化架构"><a href="#虚拟化架构" class="headerlink" title="虚拟化架构"></a>虚拟化架构</h2><p>虚拟化架构在一定程度上会影响硬件性能的发挥。如果你对硬件没有什么兴趣，那不用过多深入了解，<strong>明白各不同虚拟化架构服务器带来的坑就可以了</strong>。</p><p>虚拟化是云计算的基础。简单的说，虚拟化使得在一台物理的服务器上可以跑多台虚拟机，虚拟机共享物理机的 CPU、内存、IO 硬件资源，但逻辑上虚拟机之间是相互隔离的。</p><p>物理机我们一般称为宿主机（Host），宿主机上面的虚拟机称为客户机（Guest）。</p><p>那么 Host 是如何将自己的硬件资源虚拟化，并提供给 Guest 使用的呢？<br>这个主要是通过一个叫做 Hypervisor 的程序实现的。</p><p>根据 Hypervisor 的实现方式和所处的位置，虚拟化又分为两种：</p><ul><li>全虚拟化</li><li>半虚拟化</li></ul><p><strong>全虚拟化：</strong><br>  Hypervisor 直接安装在物理机上，多个虚拟机在 Hypervisor 上运行。Hypervisor 实现方式一般是一个特殊定制的 Linux 系统。Xen 和 VMWare 的 ESXi 都属于这个类型</p><p><img src="https://img.techfens.com/i/static/aHR0cHM6Ly9pbWcxLnNkbmxhYi5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTgvMDkvMi5qcGc" alt="img"></p><p><strong>半虚拟化：</strong></p><p><img src="https://graph.baidu.com/thumb/v4/3204067461,2092513912.jpg" alt="img"></p><p><strong>理论上讲：</strong></p><p>全虚拟化一般对硬件虚拟化功能进行了特别优化，性能上比半虚拟化要高；<br>半虚拟化因为基于普通的操作系统，会比较灵活，比如支持虚拟机嵌套。<strong>嵌套意味着可以在 KVM 虚拟机中再运行 KVM。</strong></p><h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><p>如今大多数云服务器都是使用 KVM 虚拟化。一般KVM 虚拟化的机器，<strong>内存与硬盘超售较难，但是CPU性能可以。</strong></p><p>KVM 是Linux下的全功能虚拟化架构，基于 KVM 架构的 VPS，默认是没有系统的，可自己上传 ISO 或调用服务商自带的 ISO 手动安装系统。适合喜欢折腾的用户，拓展性很高。</p><p>由于 KVM 架构全功能虚拟化架构，甚至拥有独立的 BIOS 控制，所以对母服务器性能影响较大，所以基于 KVM 的 VPS 较贵，但 KVM VPS 相对其它架构的 VPS 较为自由。</p><table><thead><tr><th>项目</th><th align="center">Xen</th><th align="center">KVM</th></tr></thead><tbody><tr><td>问世时间</td><td align="center">2003年</td><td align="center">2007年</td></tr><tr><td>支持企业</td><td align="center">Citrix、Novell、Oracle、Sun、Ret Hat（RHEL5）和Virtual Iron</td><td align="center">Redhat、Ubuntu等</td></tr><tr><td>支持的虚拟化技术</td><td align="center">全虚拟化、半虚拟化</td><td align="center">全虚拟化</td></tr><tr><td>支持架构</td><td align="center">x86、IA64和AMD、Fujitsu、IBM、Sun等公司的ARM，以及x86/64 CPU商家和Intel嵌入式的支持</td><td align="center">支持虚拟化的CPU</td></tr><tr><td>支持操作系统</td><td align="center">UNIX、Linux和Microsoft Windows</td><td align="center">UNIX、Linux和Microsoft Windows</td></tr><tr><td>动态迁移</td><td align="center">支持</td><td align="center">支持（以前不支持）</td></tr><tr><td>内核支持</td><td align="center">需要对内核打补丁</td><td align="center">内置在内核中</td></tr></tbody></table><h3 id="Xen"><a href="#Xen" class="headerlink" title="Xen"></a>Xen</h3><p>Xen 是基于硬件的完全分割，物理上有多少的资源就只能分配多少资源，因此也很难超售。可分为 Xen-PV（半虚拟化），和 Xen-HVM（全虚拟化）。</p><p>Xen是不能超售内存和硬盘的，当母服务器只有16G内存以及100G硬盘时，当开Xen架构（任意一个虚拟化）的1G内存、25G硬盘的子机时，会直接占用服务器1G内存，以及25G硬盘，所以 Xen 的性能，相比 OpenVZ 在超售的情况下要好。</p><ul><li><p>Xen-PV：半虚拟化，所以它仅仅适用于linux系列VPS，但它的性能损失比较少，大概相对于母机的4%-8%左右。</p></li><li><p>Xen-HVM：全虚拟化，可以安装windows或自由挂载ISO文件安装任意系统，由于是全虚拟化，所以性能损失较大，大概相对于母机性能损失8%-20%左右。</p></li></ul><h3 id="OpenVZ"><a href="#OpenVZ" class="headerlink" title="OpenVZ"></a>OpenVZ</h3><p>无脑超售，所有的硬件性能都可以超售，而且几乎没有什么成本，包括但不限于内存，硬盘，CPU等。一般在1G内存以下的小机器上见得多。</p><p>能不碰就不碰，除非真的很香（指线路），openvz 架构带来的不仅仅有性能差距，更严重的是兼容性问题。毕竟 openvz 还有另外一个特点便是它是直接调用母服务器的内核，所以会导致部分软件无法使用，以及部分内核文件是无法修改。其虚拟化出来的机器资源不是自己独有的，比如安装VPN服务需要注意检测虚拟网卡支持。</p><p><strong>所以如果没有硬件功底和折腾的能力，建议避坑。</strong></p><h3 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h3><p>非开源的商业软件，当然其系列产品授权费用也是非常昂贵。所以大部分使用 VMWare 服务商会使用 VMware工作站（VMware Workstation）提供VPS。</p><p>使用 VMWare Workstation 虚拟化的 VPS 可以超售，因为其和 OpenVZ 架构一样，子机用多少内存，就扣除系统多少内存，但如果物理内存不足时可能导致母服务器使用 Windows 虚拟内存。</p><p><strong>所以如果没有硬件功底和折腾的能力，建议避坑</strong>。</p><h3 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h3><p>印象中除了微软的 Microsoft Azure ，基本都见不到。实话实说我也没用过，先忽略吧。</p><h2 id="线路"><a href="#线路" class="headerlink" title="线路"></a>线路</h2><p>线路绝对是买服务器最深的坑之一。本篇幅较长，不想纠结直接跳到结论即可。</p><p>（使用国内服务器，且面向国内使用，可以不做了解）</p><h3 id="国内线路"><a href="#国内线路" class="headerlink" title="国内线路"></a>国内线路</h3><h4 id="单线："><a href="#单线：" class="headerlink" title="单线："></a>单线：</h4><p><strong>通常指电信单线路或联通单线路或移动单线路（单网卡单IP）。</strong></p><p>单线服务器就是指这个IDC机房要么是联通线路接入，要么是电信线路接入，要么就是移动线路接入，相互之间跨运营商访问效果比较差。</p><h4 id="双线："><a href="#双线：" class="headerlink" title="双线："></a>双线：</h4><p>通常就是电信+联通双线路(单网卡双IP或双网卡双IP)。</p><p>双线服务器是指这个机房是由电信、联通两条线路同时接入的。</p><p>这样服务器就拥有了两个IP地址，然后利用路由器技术自动分辨访问者的线路，从而实现电信用户使用电信IP进网站，网通用户使用网通IP访问网站，这是单网卡双IP方式。这样做可以从硬件上解决两种线路互访困难的情况，以此提高网站打开速度。</p><p><strong>但如何实现一个域名电信用户访问电信IP? 网通用户访问网通IP地址呢?</strong></p><p><strong>域名智能DNS解析双线主机实现，域名泛解析或者对应线路智能解析</strong>。</p><p>其原理是用户访问网站时先向DNS服务器查询这个网站的IP地址。而DNS服务器会判断用户是电信上网还是网通上网? 是电信上网 就返回电信IP地址。是网通上网就返回网通IP地址。</p><p>双IP双线路实现方式是指在一台服务器上安装两块网卡。分别接入电信网线与网通网线并设置一个网通IP与一个电信IP，这样一台服务器上就有了两个IP地址，需要在服务器上添加网通或电信的路由表来实现网通用户与电信用户分别从不同的线路访问。</p><p><strong>双线双IP最显大特点就是速度快，南北互通好：劣势是技术上还不是很成熟，存在不稳定情况。</strong></p><h4 id="三线"><a href="#三线" class="headerlink" title="三线"></a>三线</h4><p>通常电信+联通+移动(单网卡三IP)，公网分别通过电信、联通、移动IP地址接入电信、联通、移动上层运营商公用网络，其原理类似于双线单网卡和双IP</p><p>这三条线路将手机WiFi融合在一起，移动WiFi的接入率更高，例如，游客使用移动4G访问移动服务器，想想那速度体验是什么样子的？不用说，速度体验无疑会比单线和双线更快。</p><h4 id="BGP线路"><a href="#BGP线路" class="headerlink" title="BGP线路"></a>BGP线路</h4><p><strong>采用BGP方案来实现电信/联通/移动 多线路互联的机房，我们称为BGP机房。</strong></p><p><strong>BGP(边界网关协议)协议</strong>主要用于互联网AS(自治系统)之间的互联，BGP的最主要功能在于控制路由的传播和选择最好的路由。中国网通与中国电信都具有AS号(自治系统号)，全国各大网络运营商多数都是通过BGP协议与自身的AS号来互联的。</p><p>BGP分为两种，一种动态，环路情况下自动切换，是最好的。静态BGP遇到堵塞，需要手动来切换线路。</p><p>一般情况下3线3IP好在互不影响，3线单IP好在便宜好多，一般都是自由比例混合，最大化利用资源。</p><p>一般情况下动态BGP会贵很多，但是市面上的BGP很多都是静态BGP冒充的，真正的动态BGP很少。如果价格一样，不考虑网卡成本的话，首先看你要达到哪种目的。3网卡的可能你被迫需要把3个的带宽都小一点，但是好在可以保障业务的延续。</p><p>3线单IP需要手动切换，如果带宽是自由比例混合的话，就看接入商的服务质量了。会影响访问效果，延续是没有问题的。</p><p>如果价格一样，3线单IP的BGP应该是好一点的。</p><p><img src="https://img.techfens.com/i/static/d26062c08fad4b25bcd005b960c6ed56.jpeg" alt="img"></p><h3 id="出海线路"><a href="#出海线路" class="headerlink" title="出海线路"></a>出海线路</h3><p>国内的服务器可以直接忽略此部分。</p><h4 id="缩写注释"><a href="#缩写注释" class="headerlink" title="缩写注释"></a>缩写注释</h4><p><strong>CT</strong> China Telecom 中国电信</p><p><strong>CU</strong> China Unicom 中国联通</p><p><strong>CM</strong> China Mobile 中国移动</p><p><strong>CN</strong> China Netcom 中国网通</p><p><strong>CMI</strong> China Moblie International 中国移动国际（移动自己的国际出口线路）</p><p><strong>Qos</strong> Quality of Service 服务质量等级，等级越高，越是享有优先权，越高的稳定性保障</p><p><strong>CMCB</strong> China Moblie Commercial Broadband 中国移动商宽（国际出口高Qos等级特权）</p><p><strong>CN2</strong> ChinaNet Next Carrying Network 中国电信第二代承载网</p><p><strong>9929</strong> 原网通骨干网 AS9929，现为联通第二大网</p><h4 id="亚太地区"><a href="#亚太地区" class="headerlink" title="亚太地区"></a>亚太地区</h4><h5 id="日本"><a href="#日本" class="headerlink" title="日本"></a>日本</h5><p>常见线路：NTT、KDDI、IIJ、SoftBank（软银）、Telstra、PCCW</p><p>特殊线路：BGP.NET、CT CN2</p><p><strong>NTT（日本）</strong></p><p>线路质量：CT 完全没法用，CU CM 看地区看脸，大概率没法用，但是CMCB、CN2 都没问题（CN2到日本除非做特殊优化，否则一律去程绕香港NTT，请悉知）</p><p>大部分日本机房最常见的就是NTT线路，其次就是软银和IIJ，最少见的是KDDI，不用想也知道，NTT线路爆炸程度肯定在高峰炸的不轻。事实是，大多数人远远低估了163的汇聚层以及163到日本NTT的劣化情况，在炸的最严重的时候，链路甚至是完全断的（和到日本的海底光缆被捕鱼船整断了一样的效果），目前唯一还能看看的是，上海联通-日本东京NTT（注意不是大阪NTT），其他别说高峰了，低峰都惨不忍睹。</p><p>必须澄清的一点是，NTT网络一点都不烂，到亚太其他地区Peer众多，速度自然也是飞快，相反，NTT是亚太地区数一数二的大型ISP，至于为什么大陆到日本NTT的网络质量这么差，一个是NTT并不愿意放低自己的身价，第二个恐怕得问宅男了。</p><p>在用日本NTT的线路的VPS商家是一根手指头根本数不过来，光论大厂，Vultr、Linode当然也包括CT AWS回程在内的都是标准的NTT线路。</p><p><strong>KDDI</strong></p><p>线路质量：CT CU 均优异 CM 未知（估计大概率也不会差的）</p><p>KDDI的机器不是完全买不到，而是需要托在日本的朋友代买，大部分卖KDDI的商家对购买者的严格筛选，需要提供详细且真实的日本手机号、身份证、住址等信息，确认后方可开通，但是KDDI线路确实还不错。</p><p>对CT来说，不是走北京，就是走广州出口（没上海的份），这就导致江南对KDDI线路的延时并不是特别好看，但是速度高峰绝对不会慢的。CU、CM就不多讲了，体验一下就知道KDDI有多么棒了。（早就不是当年的战五渣了）</p><p>点评：大BOSS，只能观赏，可惜买不到，Pass。（可以期待一下腾讯轻量日本地区哦）</p><p><strong>IIJ</strong></p><p>线路质量：CT CU 高峰Boom（CU没CT那么厉害，速度好歹还是有个50、100Mbps的） CM 看地区，有些地区还是跑的动的。但是！CMCB 飞起来</p><p>这货你肯定在当时玩耍某家樱花机房的免费Docker的时候听说过，某知名日本免费空间也是走的IIJ线路哦。IIJ一般常用来解锁日本本地流媒体、游戏，因为没有KDDI那么难买而很受Airport的青睐，价格也相对平民。（说了这么多，就是通常被当作落地或者是解锁机的意思）总体来说，性价比和可玩度都很高，如果你想成为一名高级国际线路Boom玩家，手里也不差钱的话，不妨开一台这线路的玩玩。</p><p>点评：落地、解锁机，尴尬时可以临时当正宫使用，价格实惠，绝赞性价比，不二之选。</p><p><strong>SoftBank（软银）</strong></p><p>线路质量：CT 高峰速度会被Qos的比较厉害 CU 逆天无敌强，绝对是联通到日本最好的线路 CM 还是看地区看脸 CMCB 强无敌，轻松跑满1Gbps</p><p>最近这线路也不难买了，很多商家都挂着软银的噱头来卖日本鸡。不想多说什么，都快被商家吹出迫真IPLC的感觉了。</p><p>点评：价格较贵，但如果是CU网络，或者是CU中转，想都不用想，上软银没错了，世界加钱可及！</p><p><strong>Telstra（日本）</strong></p><p>均走香港Telstra到日本，请参见Telstra（香港）</p><p><strong>PCCW（日本）</strong></p><p>均走香港PCCW到日本，请参见PCCW（香港）</p><p><strong>CN2（日本）</strong></p><p>不用多说了，电信自家到日本的第二代骨干网，速度和延时肯定不会逊色，但是那个价格真的是比IPLC还要贵，关键是他家的Ctcloud真的不给力，只接了NTT，要是资源是Tesltra、KDDI啥的，还会到新加坡绕一圈，实在是看不下去，推荐还是别给电信天翼云送钱了。</p><h5 id="新加坡"><a href="#新加坡" class="headerlink" title="新加坡"></a>新加坡</h5><p>常见线路：NTT、Tata通信、Telstra、PCCW、sg.gs</p><p>其他线路：BGP.NET、CN2</p><p><strong>NTT</strong></p><p>CN2和CM走香港NTT去新加坡，故线路质量参见香港NTT，CT163和CU都绕日本NTT，故线路质量参见日本NTT</p><p><strong>Tata通信</strong></p><p>线路质量：CT CU 没法用 CM 一般</p><p>堪称史上到新加坡延时最高的线路，<strong>环太平洋最佳观光路由</strong>，CT163和CU碰到回程就是新加坡-&gt;日本-&gt;美国-&gt;中国（反之就是去程）</p><p><strong>Telstra（新加坡）</strong></p><p>线路质量：CT 差劲 CU 速度飞快 CM 满血 CMCB 更是飞快 教育网 极快</p><p>教育网到走Telstra的线路速度是非常优异的，有多么优异我想测试过的同学都知道了。CT去程不知为何先绕到日本NTT后再转Telstra，明明回程在香港有就直连了电信，这就导致NTT一炸，这新加坡机器就跟着一起炸，失去了意义。</p><p>这里我还是来好好谈谈CU，虽然CU这几年很平庸并且在不可避免地被CT和CM吞噬市场，但是CU的<strong>普宽</strong>出国质量依旧是三网最好的，在这里，上海、广州联通到Telstra均有直连线路，延时略高，但是速度绝对不差。移动走香港CMI转Telstra，体验一如既往的好。</p><p>点评：没啥好讲的，一直喊联通牛逼就行了~</p><p><strong>PCCW（新加坡）</strong></p><p>均走香港PCCW线路到新加坡，详见PCCW（香港）</p><p><strong>sg.gs</strong></p><p>线路质量：CT CU CM 优异</p><p>点评：对大陆网络做了很大优化，默认三网走联通国际线路，当然这家也接了CN2</p><p><strong>CN2（新加坡）</strong></p><p>如果你还记得套路云国际新手套餐2.0的话，你一定知道CT来回走的是CN2 GIA，虽然只有30Mbps，但是令人惊艳的响应速度实在让人感到舒适。现在腾讯轻量云也正式开放了对新加坡和香港的购买权限。</p><h5 id="越南"><a href="#越南" class="headerlink" title="越南"></a>越南</h5><p>常见线路：VNPT</p><p>线路质量：CT CU CM 均带不动</p><p>越南的VNPT与CT在广东有直连Peer，可惜口子实在是太小了（限速限的只有100KB/S），外加越南到国际线路不佳，除非你在越南有业务，否则买越南的VNPT并不是一个很好的主意。</p><h5 id="韩国"><a href="#韩国" class="headerlink" title="韩国"></a>韩国</h5><p>常见线路：KT、SK</p><p>其他线路：BGP.NET、CN2</p><p><strong>KT 韩国电信 Korea Telecom</strong></p><p>线路质量：CT CU CM 三网还算是友好 <strong>9929极佳</strong></p><p>韩国的线路其实也并不多，而且韩国到国际都往往会绕香港、日本、美国，价格不菲，除非要玩韩服或者说在韩国有业务，否则一般不考虑韩国的VPS。这里不对韩国的几大常用线路做详细的点评，这不是我们的重点。</p><h5 id="香港"><a href="#香港" class="headerlink" title="香港"></a>香港</h5><p>常用线路：PCCW、Telstra、HKBN、HKT、HGC、NTT（香港）、Azure、Google Cloud Platform、Gcorelabs、Tata通信</p><p>其他线路：CN2、9929、CUI、CMI香港、BGP.NET等</p><p>必须一提的是，香港到大陆由于流量结算费用昂贵，所以一般高峰都会对大陆的流量主动Qos限速，但是上了CN2一般可以缓解大部分的限速问题。</p><p><strong>HKBN 香港频宽</strong></p><p>线路质量：CT 高峰不行 CU 还不错 CM 不大行 CMCB 起飞</p><p>常用于解锁香港原生资源，到国内CT高峰有明显的Qos限速和丢包，CU和CM不成大问题。</p><p>由于我很少使用HKBN线路的小鸡，对该线认识不足，期待各位大佬更多的补充。</p><p><strong>HKT 香港电讯</strong></p><p>线路质量：CT 163高峰还是不行 CU 如果不绕韩国还不错 CM&amp;CMCB 同HKBN</p><p>常用于解锁香港原生资源，HKT对于CT来说，该有的Qos一样都不会少，高峰还是得爆炸，CU要注意一下，一部分HKT的IP会使得联通路由到韩国绕一圈再到香港，所以建议买前先找商家要测试IP实测不绕路后再购买，如果是NAT的话就只能等商家换IP了。</p><p>点评：HKT 联通用户要注意一下，移动用户走的是CMI香港故请无视绕路问题，但CMI香港大部分移动家宽都是高峰被QOS的很厉害的。</p><p><strong>PCCW</strong></p><p>线路质量：CT 非高峰也较差，高峰更是爆炸 CU 尚可 CM 能救起来 CMCB 裸跑都能起飞</p><p>这家应该不需要我介绍了吧？油管啥的都介绍的泛滥了，但是有点是需要注意的，CT到PCCW一定绕北京再去香港，这就非常无语，晚上延时和速度也并不好看，上了锐速可以爽一会儿，但是很快你就会发现被Qos了，速度一上去就被掐断了链接。</p><p>对于CU来说，PCCW的链路还是可以接受的。CM高峰实测使用锐速成功起飞，尽管不够稳定，但是速度的确还说得过去。另外亚太很多地区的路由都是借道香港的PCCW再到达落地的，所以PCCW要承载的流量还是比上面的那几个要大很多。</p><p><strong>Telstra</strong></p><p>线路质量：CT 高峰尚可 CU 高峰不错 CM 看香港CMI给不给力 CMCB 轻松起飞</p><p><strong>GCP/Azure/Gcorelabs 等一些直连机房线路</strong></p><p>直连不代表就顺畅，用的人多了一样爆炸，一个活生生的例子就是GCP香港和163接了10G，随着玩GCP的人越来越多，这速度能快到哪里去。Gcorelabs回程优化了一下，走了香港CMI回国，但是CT CU去程日本NTT实在是一块绊脚石。（日本NTT链路对于CT和CU来说有多糟糕，请翻阅NTT日本）</p><p><strong>Tata通信</strong></p><p>没法用系列，别看着CT香港不绕路直连，但那个丢包和延时实在是没法看，碰到敬而远之就是了。联通更是绕到美国和欧洲去了，这玩啥呢。</p><h4 id="欧洲地区"><a href="#欧洲地区" class="headerlink" title="欧洲地区"></a>欧洲地区</h4><h5 id="俄罗斯"><a href="#俄罗斯" class="headerlink" title="俄罗斯"></a>俄罗斯</h5><p>常见线路：RosTelecom（俄罗斯电信）、TTK（俄罗斯铁通）、MTS、Megfon、RETN</p><p>特殊线路：莫斯科CN2</p><p>如果你听说过过伯力的话，那你一定知道Gcorelabs的伯力小鸡，特别是老伯力KVM-0套餐一直是很多人想要的传家宝，为什么会这么火爆，请听下面讲解。</p><p><strong>在伯力、海参崴</strong>这种地方的俄罗斯小鸡，无论是RT还是TTK，对CM都是非常的不友好（绕港是算好的了，大部分绕欧，延时400ms+），建议移动用户放弃购买这块地方的小鸡，或者使用电信、联通中转。</p><p><strong>RosTelecom</strong></p><p><strong>线路质量：CT 延时漂亮，速度高峰上不去 CU 延时漂亮，速度也还不错 CM 只能说再见了</strong></p><p>可能对各位来说，俄罗斯的线路很陌生，或许只知道JustHost的Dataline地区、Adman机房，然后知道是CN2 GT（主机百科居然能把GT说是CN2 GIA，这个必须佩服，吸引小白上钩不折手段），事实你用过以后也一定知道，效果不咋地。</p><p>可能在对新西伯利亚adman进行路由测试的时候，你会看到多个 rt.ru 的路由，那就是我们现在要讲的——俄罗斯电信RosTelecom，也是目前俄罗斯最大的ISP。</p><p>俄罗斯电信和大陆有一条陆缆，在路由上看就是北京直达俄罗斯的伯力地区，但是中国移动宽带业务发展的很晚，以至于在这个陆缆上，没有它的份额。</p><p>电信和联通刮风了这一条陆缆，目前走到伯力这条线联通资源充足，有着得天独厚的优势，电信到伯力也是163骨干中少数能带起来的线路了（虽然这个优势已经变得越来越小）。</p><p>点评：联通极佳，上联通中转，走伯力RT的毛子鸡随随便便就能跑起来，甚至不需要BBR。</p><p><strong>TTK</strong></p><p>线路质量：CT 还真的速度不错 CU 以前真心不错 可惜现在大不如以前了 CM Byebye~</p><p>联通可能看到TTK的次数比RT还多，主要还是走TTK比走RT便宜，骨干网晚高峰还是炸的蛮厉害的，远远没有以前那么舒服了，感觉还不如换日本软银？</p><p>电信这线路倒是挺少见的，大部分都是走RT线路为主，最近有些商家开始在海参崴卖机器，走的是TTK的线路，我还是比较关注，等他们部署好了我就“厚颜无耻”地去要一台做测试啦。</p><p>与RT不同的是，TTK在海参崴和国内2大运营商有Peer（RT是伯力），这就导致了延时的不同，海参崴的机器延时一般比伯力略高，对于CT来说速度不逊于RT。</p><p><strong>MTS</strong></p><p>线路质量：CT 太慢了 CU 未知 CM 没有直连</p><p>CT德国出口似乎很容易就和MTS打满，导致爆炸，高峰能放480p已经是奇迹了。</p><p>CM 凭借着de-cix Peer，所以如果de-cix炸了，那么MTS也会跟着一起炸</p><p><strong>Megfon</strong></p><p>线路质量：CT CU CM 这线路实在太慢了</p><p>垃圾一个，用的头大</p><h5 id="英国"><a href="#英国" class="headerlink" title="英国"></a>英国</h5><p>常见线路：Telia、Cogentco、Level3、Zayo、Tata通信</p><p><strong>Cogentco</strong></p><p>线路质量：CT 较好，低峰跑个100Mbps是没啥问题的 CU 大部分绕美 CM 极少部分绕美，基本直连，速度较快</p><p>美西Cogentco一直是国内到美国的主动脉，所以这条线路基本天天都会炸，但是实际上CT和欧洲Cogentco的接的口子其实也非常大，但是CT到欧洲主要走Level3和Telia，Cogentco根据我的观察应该是老三了，速度很快不说，只要163汇聚层不炸，都应该可以跑得出速度，如果CT碰到欧洲Cogentco的VPS可以考虑买一台。</p><p>Cogentco到CU 9929也是一个非常棒的选择，这个我们等会儿在德国部分细讲。</p><p><strong>Telia</strong></p><p>线路质量：CT 非高峰无压力 CU 部分直连 Boom CM 带不动 CMCB 起飞</p><p>可能Telia在美西见得比较少，欧洲见的比较多（毕竟人家是欧洲ISP嘛），尽管Telia与CT、CU也有非常大的带宽Peer，可惜高峰还是炸的很厉害。</p><p>至于CM来讲，没有什么不是加钱办不到的，只要能上高Qos的商宽，速度都能上的去。</p><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3><h3 id="线路总结"><a href="#线路总结" class="headerlink" title="线路总结"></a>线路总结</h3><p>不想纠结的话，且主体用户群以国内为主：</p><p>国内：BGP &gt; 三线 &gt; 双线 &gt; 单线 （废话，不就是钱吗）</p><p>国外（延迟）：香港 = 韩国 ＞亚洲 &gt; 其他</p><p>国外（性价比）：美国 &gt;&gt; 其他</p><p>线路：CN2 GIA &gt; CN2 GT &gt; 其他</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><p>… …</p><p>还有起码一半没写，想起来再更 哈哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> 服务器运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑日记 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种绕过校园网开热点限制的方法</title>
      <link href="posts/xiaoyuanwang.html"/>
      <url>posts/xiaoyuanwang.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>校园网真是个神奇的东西，超高的网费带来的还是极差的体验，很多学校的校园网不仅设有仅仅1~2台登录设备限制，其客户端还各种千方百计阻拦你开热点，实在是令人痛不欲生。</p><p>本up坐标广东某学校，目前的校园网新由电信代理，使用的客户端是<strong>广东天翼校园</strong>，是今年才刚刚换装全新的使用的，<strong>具有网页客户端双重验证，且同时在线设备数仅为1台</strong>，极其令人反胃，而且速度感人，晚上还断网，简直了。</p><p><img src="https://img.techfens.com/i/static/image-20210521201206970.png" alt="网页认证"></p><p>目前大部分所谓说可以过校园网的软件都是已经失效的，甚至已经变成广告流氓程序（比如猎豹wifi之类的），大家可以试试，但要做好防毒措施。</p><p>在如此严峻的情况下，我还是给大家总结了几种至少在我这里可以使用的开热点的方法，希望能给各位饱受校园网垄断的广大苦逼学生党们一点思路。</p><h1 id="虚拟机万能法"><a href="#虚拟机万能法" class="headerlink" title="虚拟机万能法"></a>虚拟机万能法</h1><p><strong>虚拟机</strong>  +  <strong>外置无线网卡</strong>的组合，基本上是可以通杀所有网络限制的，哪怕是某些需要进行严格网络审计的内网，这种方法也可以绕过网络检测。只是用来绕一个校园网的开热点限制的话，只能说是万能但相对浪费资源。</p><p>不推荐使用内置无线网卡，有几率会被检测出，具体情况自行测试。</p><p>你需要准备的东西有：</p><ul><li>虚拟机程序</li><li>用于虚拟机的系统镜像</li><li>外置的无线网卡和驱动</li><li>一个网络热点生成程序</li><li>一双手</li></ul><h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><p>这里我们推荐使用<code>VMWare</code>虚拟机进行操作。其他虚拟机自行摸索即可，换汤不换药。</p><p>首先下载一个<code>VMWare</code>虚拟机，版本不限（最好&gt;10.0)，可自己找资源下，图省事的可以直接用我整理好的，链接会放在此章结尾。这里我以<code>15.5</code>版本演示。</p><p>然后下载一个系统镜像，建议选择<code>windows7</code>或者<code>windows10</code>，<code>windows7</code>系统更加精简，省资源，电脑配置不高的同学可以选择，缺点是兼容性不好，而且需要自己打上无线网卡的驱动。</p><p>这里推荐两个下载镜像的网站：</p><p>山己几子木：<a href="https://msdn.sjjzm.com/">https://msdn.sjjzm.com/</a></p><p>MSDN I TELL YOU : <a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><p>不想折腾的同学也可以用我整理的两个系统镜像，这里我选择<code>windows10</code>进行演示。</p><p><img src="https://img.techfens.com/i/static/image-20210524103315219.png" alt="image-20210524103315219"></p><p>系统安装过程很简单，不会的可以自己找教程，这是安装好后虚拟机的界面。</p><h2 id="网络热点配置"><a href="#网络热点配置" class="headerlink" title="网络热点配置"></a>网络热点配置</h2><p>首先，在开启虚拟机后，插入你的无线网卡。（如果已经插上了，请拔出来重新插一次），会看到虚拟机的提示：</p><p><img src="https://img.techfens.com/i/static/image-20210524103913855.png" alt="image-20210524103913855"></p><p>如图操作，选择确定即可。<strong>如果没有看到弹窗，请手动添加网卡设备到虚拟机中</strong></p><p><img src="https://img.techfens.com/i/static/image-20210524104115460.png" alt="image-20210524104115460"></p><p><code>windows10</code>自带无线网卡驱动，当然如果你想获得更稳定的体验，可以下载厂家提供的驱动。<code>windows7</code>不可省略驱动安装步骤。</p><p>下面基本就可以直接开热点了，系统自带的热点经过测试有可能出现无网络或者开启失败的情况，为了最稳定的体验，我建议安装一个热点分享程序。</p><p>我这里选择的是WIFI共享大师， 纯流氓程序一个，但是能比较好的适配大多数虚拟机的热点开启情况，我这里准备了原版和去流氓版的WIFI共享大师，大家可以都下来试试（反正虚拟机不怕死）</p><p><img src="https://img.techfens.com/i/static/image-20210524105119394.png" alt="image-20210524105119394"></p><p>现在就基本可以稳定开启热点了。如果连上WIFI后发现部分网页APP无网络的情况，可以尝试在手机上修改DNS为<code>223.5.5.5</code>或<code>114.114.114.114</code></p><p><img src="https://img.techfens.com/i/static/image-20210524110245407.png" alt="image-20210524110245407"></p><p>用到的虚拟机和镜像等文件：<a href="https://cloud.189.cn/t/Nv6jIbZZZBbu">https://cloud.189.cn/t/Nv6jIbZZZBbu</a> (访问码:ei5h)</p><h1 id="旧版本客户端"><a href="#旧版本客户端" class="headerlink" title="旧版本客户端"></a>旧版本客户端</h1><p>不少校园网登陆器都经历了十几年的风雨，旧版本客户端很多时候审查不严，可以使用删后台大法绕过热点检查。</p><p>up用的是广东天翼校园，如果你也是用这个登录器，可以试试这个旧版本的天翼校园，经过简单的删后台操作即可。</p><p>第一步，先卸载原本的天翼校园，安装旧版天翼校园，正常登录。</p><p><img src="https://img.techfens.com/i/static/image-20210524110852200.png" alt="image-20210524110852200"></p><p>第二步，打开任务管理器，直接结束进程即可开启热点。</p><p><img src="https://img.techfens.com/i/static/image-20210524111059752.png" alt="image-20210524111059752"></p><p>此方法十分简单，但是局限性很大，断网不稳定概率高，能否找到能用的旧版登陆器只能看看你们的学长给不给力了。</p><p>旧版本天翼校园：<a href="https://cloud.189.cn/t/quUnU3ANZvmm">https://cloud.189.cn/t/quUnU3ANZvmm</a> (访问码:j8dl)</p><h1 id="第三方登陆器"><a href="#第三方登陆器" class="headerlink" title="第三方登陆器"></a>第三方登陆器</h1><p>有很多大佬自制的第三方登陆器，可以替代原先的校园网登录程序，不受原校园网登录器的限制，这种方法比较适合高技术力的同学尝试，这里我贴上我们学校一位大佬开发的第三方天翼校园登陆器<code>EAuthenticator</code>。</p><p><img src="https://img.techfens.com/i/static/image-20210525150251755.png" alt="image-20210525150251755"></p><p>第三方登陆器大多都需要自己填写<code>nasip</code>,每个学校的校园网认证地址都是不相同的，寻找自己学校的<code>nasip</code>地址很简单，作者提供了两种方法：</p><ol><li>断网时会自动打开一个网页， 上面会有天翼校园的客户端下载。此时查看网址，<code>” &amp;wlanacip= "</code>后面的IP地址即为<code>nasip</code>。</li><li>右键你的天箅校园客户端，打开文件位置，找到<code>Config</code>文件夹,打开<code>ConnectSetting.ini</code>文件，<code>wlanacip</code>后面的IP地址即为<code>nasip</code></li></ol><p>使用第三方登陆器不仅连接更稳定，而且不受网络限制，如果有合适的第三方登陆器，应该是上校园网最舒服的方法。</p><p>Github 项目地址：<a href="https://github.com/PandaAdap/EAuthenticator/releases">https://github.com/PandaAdap/EAuthenticator/releases</a></p><h1 id="热点限制补丁"><a href="#热点限制补丁" class="headerlink" title="热点限制补丁"></a>热点限制补丁</h1><p>推荐一个很强大的小工具 <code>EShare Tool</code>，可以干掉原校园网客户端的热点限制，<strong>不局限于天翼校园</strong>，使用方法很简单，一键操作，永久有效。</p><p><img src="https://img.techfens.com/i/static/image-20210525152436280.png" alt="image-20210525152436280"></p><p>Github 项目地址：<a href="https://github.com/PandaAdap/EShareTool/releases">https://github.com/PandaAdap/EShareTool/releases</a></p><p>无脑操作，一键起飞，通杀市面上90%的客户端，缺点是挑电脑，不是每台电脑都能有效跑起来。（还有不少类似的小工具，大伙都可以去找找）</p><h1 id="端口绕行"><a href="#端口绕行" class="headerlink" title="端口绕行"></a>端口绕行</h1><p>此方法如果成功，可以直接让你省下四年校园网费，就不仅仅是开个热点这么简单了。</p><p>原理：部分认证设备没有屏蔽53，67，68等等端口，可通过这些端口建立VPN连接将流量转发出去。</p><p>就算所有端口屏蔽了，如果启用了IPV6，那么能通过IPV6 VPN服务器转发流量。</p><h2 id="0-测试53DNS端口是否放通"><a href="#0-测试53DNS端口是否放通" class="headerlink" title="0. 测试53DNS端口是否放通"></a>0. 测试53DNS端口是否放通</h2><p>控制面板打开网络属性，发现DNS为外部114DNS。</p><p><img src="https://img.techfens.com/i/static/20211117210921.png"></p><p>开启CMD 输入：<code>ping baidu.com</code> 如图可以获得IP地址220.181.38.251 但无法ping通。</p><p><img src="https://img.techfens.com/i/static/Ni9O.png" alt="img"></p><p>说明认证设备开放了53端口【为了通过114dns获取认证页面地址】，并且屏蔽了其它端口导致不能ping通。出现这种情况，那么恭喜你此方法是有可行性的。</p><h2 id="1-安装OPENVPN服务器-Windows"><a href="#1-安装OPENVPN服务器-Windows" class="headerlink" title="1. 安装OPENVPN服务器[Windows]"></a>1. 安装OPENVPN服务器[Windows]</h2><p><a href="http://softether.fishinfo.cn/cn.aspx">SoftEther 下载中心 (fishinfo.cn)</a> 下载并安装【server】</p><p>如果是在本地服务器上连接并配置，则安装server后可以直接进入控制台</p><p>如果是远程管理服务端，则需要输入服务器公网IP端口【默认443】，默认无密码</p><p><img src="https://img.techfens.com/i/static/NN5u.png" alt="img"></p><p>如图连接</p><h3 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="(1).添加用户"></a>(1).添加用户</h3><p><img src="https://img.techfens.com/i/static/NUAb.png" alt="img"></p><p>新建用户</p><h3 id="2-开启NAT"><a href="#2-开启NAT" class="headerlink" title="(2).开启NAT"></a>(2).开启NAT</h3><p><img src="https://img.techfens.com/i/static/NePc.png" alt="img"></p><h3 id="3-设置端口并导出配置文件"><a href="#3-设置端口并导出配置文件" class="headerlink" title="(3).设置端口并导出配置文件"></a>(3).设置端口并导出配置文件</h3><p>把默认的1194端口改为53或67或68等等，如果不行多次尝试</p><p><img src="https://img.techfens.com/i/static/Ngmv.png" alt="img"></p><p>先设置端口再生成配置文件</p><p>下载并编辑xxx_openvpn_remote_access_l3.ovpn</p><p><img src="https://img.techfens.com/i/static/NnUo.png" alt="img"></p><p>需要配置地址和端口 按照实际情况来看。</p><h2 id="2-客户端连接"><a href="#2-客户端连接" class="headerlink" title="2. 客户端连接"></a>2. 客户端连接</h2><p>客户端下载地址：<a href="https://openvpn.net/vpn-client/">OpenVPN Connect Client | Our Official VPN Client | OpenVPN</a></p><p>最后双击刚刚保存的配置文件,按照提示导入，输入账户，连接并输入密码就成功启动了</p><p>如果连接超时，正常网络下却能连接，那么很可能是53端口未开放，需要换个端口试试</p><p><strong>已知问题：部分系统在连接成功一段时间后会无响应，此时流量显示0kb，这时候需要重启软件</strong></p><h1 id="伪装已认证设备"><a href="#伪装已认证设备" class="headerlink" title="伪装已认证设备"></a>伪装已认证设备</h1><h2 id="0-下载相关局域网扫描软件"><a href="#0-下载相关局域网扫描软件" class="headerlink" title="0. 下载相关局域网扫描软件"></a>0. 下载相关局域网扫描软件</h2><p>网络扫描软件:Advanced port scanner 官网下载地址:<a href="https://www.advanced-port-scanner.com/cn/">点击打开</a></p><p>MAC地址修改软件:<a href="https://1812z.lanzouw.com/ihiduwgbiah">天天修改器-蓝凑云</a></p><h2 id="1-扫描局域网"><a href="#1-扫描局域网" class="headerlink" title="1. 扫描局域网"></a>1. 扫描局域网</h2><p>  <img src="https://img.techfens.com/i/static/NtaT.png" alt="img"></p><p>输入网段IP，可以在控制面板查看</p><p>Tips:对于大型公共网络，网段可能不止一个，如图我的网段是180-183都有设备</p><h2 id="2-复制IP地址-MAC地址"><a href="#2-复制IP地址-MAC地址" class="headerlink" title="2. 复制IP地址,MAC地址"></a>2. 复制IP地址,MAC地址</h2><p>  操作之前先去控制面板记录下原来的信息</p><p>  <img src="https://img.techfens.com/i/static/N58Q.png" alt="img"></p><p>最好先断开网络进行操作，完成后再连接</p><h2 id="3-修改MAC地址随机找个幸运设备吧-doge"><a href="#3-修改MAC地址随机找个幸运设备吧-doge" class="headerlink" title="3. 修改MAC地址随机找个幸运设备吧[doge]"></a>3. 修改MAC地址随机找个幸运设备吧[doge]</h2><p>复制它的MAC地址</p><p>打开MAC地址修改工具,选择当前使用的网卡,修改[部分修改器不自动重载网卡,无法立刻生效修改内容,需要手动重载]</p><p>  <img src="https://img.techfens.com/i/static/N8As.png" alt="img"></p><h2 id="4-修改IP地址"><a href="#4-修改IP地址" class="headerlink" title="4. 修改IP地址"></a>4. 修改IP地址</h2><p>打开控制面板</p><p>  <img src="https://img.techfens.com/i/static/NkJk.png" alt="img"></p><p> 如图操作，输入刚刚复制的IP地址，子网掩码自动生成，默认网关输入刚刚记下的</p><p> 完成后保存，测试网络连接</p><p> 在这里放一个安卓端的客户端：<a href="https://wwa.lanzoui.com/iqncOwlwt1a">https://wwa.lanzoui.com/iqncOwlwt1a</a> 需要自取</p><h1 id="爆破校园网后台"><a href="#爆破校园网后台" class="headerlink" title="爆破校园网后台"></a>爆破校园网后台</h1><p>找到上面扫描的局域网信息</p><p><img src="https://img.techfens.com/i/static/NoPn.png" alt="img"></p><p>从第一个设备开始点过去，找http服务，即管理后台地址</p><p>一般是第一个设备[网关]</p><p>打开后台就是凑密码了，谷歌：看到的设备型号+默认密码</p><p>如果你运气够好，进入后就不必说了，增加个用户，起飞啦！</p><h1 id="IPv6-流量转发偷跑"><a href="#IPv6-流量转发偷跑" class="headerlink" title="IPv6 流量转发偷跑"></a>IPv6 流量转发偷跑</h1><p>可以通过这个网站测试一下你的网络是否支持 IPv6 连接：<a href="http://www.test-ipv6.com/">http://www.test-ipv6.com</a></p><p>由于本人所在的校园网环境不支持 IPv6 ，所以就放弃了。不排除是我 DNS 设置的问题。</p><p><img src="https://img.techfens.com/i/static/image-20211117221400072.png"></p><p>该方法较为复杂，需要涉及到 <a href="https://www.techfens.com/posts/kexueshangwang.html">ss 代理</a> 和一台高带宽的服务器进行流量转发（使用带ipv6功能的路由器，转发家用带宽理论也是可行的），<strong>一般不推荐个人搭建，成本过高</strong>，但是有不少所谓的校园网免流商家干这个，如果价格合适可以买一个月试试。</p><h1 id="刷路由器固件"><a href="#刷路由器固件" class="headerlink" title="刷路由器固件"></a>刷路由器固件</h1><p>如果你有这个想法，那么恭喜你，你已经是一名准垃圾佬了。</p><p>有兴趣的建议网上搜教程视频看，我反正是折腾了一个星期终于折腾出来了，然后发现还是直接用第三方校园网舒服哈哈哈哈哈</p><p>本方法耗时耗力，适合有兴趣折腾硬件的同学尝试。</p><p><strong>不要买淘宝上那些所谓的校园网路由器，P都不是，低质高价专嘎新生韭菜！！！</strong></p><p><strong>不要买淘宝上那些所谓的校园网路由器，P都不是，低质高价专嘎新生韭菜！！！</strong></p><p><strong>不要买淘宝上那些所谓的校园网路由器，P都不是，低质高价专嘎新生韭菜！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校园网 </tag>
            
            <tag> 网络技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo踩坑：文件推送到Github出现的几个BUG</title>
      <link href="posts/hexobug.html"/>
      <url>posts/hexobug.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用<code>Hexo</code>框架搭建自己的网站确实很香，毕竟是一个静态的网站，不仅响应速度很快，而且免去了服务器高昂的维护费用，可以以最低的成本搭建起一个很好的个人网站，且至今仍有众多大佬为其维护。</p><p>但由于毕竟是静态的框架，搭建复杂，容易出BUG，经常在推送博客文件到远端（本渣用的是Github托管文件）的时候出问题。</p><p>下面我就分享一些我在推送过程中遇到的问题。</p><h1 id="SSL-ERROR-Time-Out"><a href="#SSL-ERROR-Time-Out" class="headerlink" title="SSL ERROR / Time Out"></a>SSL ERROR / Time Out</h1><p>大致报错如图</p><p><img src="https://img.techfens.com/i/static/image-20210317103951997.png" alt="image-20210317103951997"></p><p>说到底就是无法链接到<code>github</code>的服务器。一般用到的<code>github</code>的服务器有两个，一个是<code>SSL</code>，一个是<code>HTTP</code>。</p><p><strong>解决方法：修改HOST文件</strong></p><p>host文件位于电脑本地路径：<code>C:\Windows\System32\Drivers\etc</code></p><p>首先访问以下地址获取<code>github</code>服务器的IP地址：</p><p><a href="http://github.com.ipaddress.com/">http://github.com.ipaddress.com/</a></p><p><a href="http://github.global.ssl.fastly.net.ipaddress.com/">http://github.global.ssl.fastly.net.ipaddress.com/</a> </p><p><img src="https://img.techfens.com/i/static/image-20210317104647299.png" alt="image-20210317104647299"></p><p><img src="https://img.techfens.com/i/static/image-20210317104716081.png" alt="image-20210317104716081"></p><p>然后在你的Host文件内添加下面三行代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># github</span><br><span class="line">140.82.114.3 github.com </span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br></pre></td></tr></tbody></table></figure><p>不同电脑不同地域查询到的IP地址不一定是相同的，请根据自己查询到的IP地址自行更换。</p><h1 id="hexo-d命令推送无反应"><a href="#hexo-d命令推送无反应" class="headerlink" title="hexo d命令推送无反应"></a>hexo d命令推送无反应</h1><p>忘记截图了。大概的情况是：输入<code>hexo d</code>后，执行推送，可以看到有反应，但是并没有推上去，一直卡着。</p><p>这种情况据群里的大佬说，是推送插件出问题了。在bash内执行下面命令卸载原来的插件，并重新安装新的插件。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 卸载之前的deployer插件:</span><br><span class="line">npm un hexo-deployer-git -save</span><br><span class="line"></span><br><span class="line"># 从master分支安装推送插件：</span><br><span class="line">npm i hexojs/hexo-deployer-git -save</span><br></pre></td></tr></tbody></table></figure><p>如果你是用<code>yarn</code>安装的话，也可以使用下面命令进行重装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 卸载之前的deployer插件：</span><br><span class="line">yarn remove hexo-deployer-git</span><br><span class="line"></span><br><span class="line"># 从master分支安装推送插件：</span><br><span class="line">yarn add hexojs/hexo-deployer-git</span><br></pre></td></tr></tbody></table></figure><h1 id="Connect-Error"><a href="#Connect-Error" class="headerlink" title="Connect Error"></a>Connect Error</h1><p>涉及玄学的BUG，尝试着修改一下config文件，在博客文件根目录。</p><p><img src="https://img.techfens.com/i/static/image-20210317111735340.png" alt="image-20210317111735340"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 把repo地址改为：</span><br><span class="line">https://你的Github用户名:你的GitHub密码@github.com/你的Github用户名/你的Github用户名.github.io.git</span><br><span class="line"></span><br><span class="line"># 例子：</span><br><span class="line">https://name:passwd@github.com/name/name.github.io.git</span><br></pre></td></tr></tbody></table></figure><div class="note warning simple"><p>请注意，如果你是最近新建的仓库，github的主分支自动分配为<code>main</code> 而不是<code>master</code>，请到自己的仓库上核实，并修改<code>config</code>文件中的<code>branch</code>为你的主分支。</p></div>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 踩坑日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一套让人血压升高的王者荣耀代练/租号/账号交易/皮肤交易/系统源码</title>
      <link href="posts/zuhaophp.html"/>
      <url>posts/zuhaophp.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h1><p>本人正在学PHP，恰逢同学想搭建一个租号平台，于是我就试着在网上花钱买了一份账号交易平台的源码练练手，你别说，还挺贵，找来找去都在几十块钱上下，也有卖几百块，甚至上万的</p><p><img src="https://img.techfens.com/i/static/image-20210308112938805.png"></p><p>看着效果挺不错，打算整个来学习一下，于是想办法搞了一套回来，下面是我搭建好的预览图</p><p><img src="https://img.techfens.com/i/static/image-20210308113131089.png" alt="主页"></p><p><img src="https://img.techfens.com/i/static/image-20210308113154332.png" alt="商品页"></p><p><img src="https://img.techfens.com/i/static/image-20210308113813515.png" alt="后台界面1"></p><p><img src="https://img.techfens.com/i/static/image-20210308113912316.png" alt="后台界面2">这给我的感觉就有点像是某发卡网改过来的，然后支付对接的是易支付，短信对接阿里云，功能不多但是也勉强能看，整个源码只有3.2MB大小。</p><p>是不是看着还行，<strong>你高兴太早了！</strong></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>算了，不太想写，有空再填坑，大概给你们看一眼，有兴趣的自己下载分析吧。</p><p>随便打开一个文件，我这里拿他API接口源码展示下</p><p><img src="https://img.techfens.com/i/static/image-20210316225426914.png" alt="image-20210316225426914"></p><p>我拿到的源码连个注释都没有，看样子是个LOL选手，QWERT全用上了，</p><p><img src="https://img.techfens.com/i/static/image-20210316225917122.png" alt="image-20210316225917122"></p><p><strong>一个文件一个IF，一个IF写了1400行</strong></p><p>这让我想起了那个GTA5线上登录的程序，也是一个IF，循环几千万遍。。。。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><strong>PHP版本请使用<code>PHP 5.6</code>，并安装<code>sg11</code>拓展，否则会报错。</strong><br><strong>后台地址为<code>/Mao_admin</code>，坑爹玩意把后台地址用绝对路径写死在程序中，不可直接修改后台地址文件夹路径</strong></p><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://wwa.lanzoui.com/iIpqVn0f19i" title="下载链接"><i class="far fa-hand-point-right"></i><span>下载链接</span></a></div><div class="btn-center"> 解压密码：techfens.com </div>]]></content>
      
      
      <categories>
          
          <category> 其他资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> PHP </tag>
            
            <tag> 交易系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>multisim仿真：三种波形产生+放大电路</title>
      <link href="posts/dianlu.html"/>
      <url>posts/dianlu.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个神奇的实验，应该是大多数模电学生都逃不了的吧 😒😒😒</p><p>实验思路倒也挺简单粗暴，输入一个交流电，通过<code>比较器</code>和<code>积分电路</code>，依次产生<code>三角波</code>，<code>方波</code>，<code>正弦波</code>，然后输出到示波器上。然后再挑选一个进行放大，本渣挑的是<code>正弦波</code>，经过两个<code>NPN三极管</code>组成的共射放大电路进行放大，输出到示波器即可，整体思路还是不难的。</p><p>仿真做出来还行，实际上手实战就又是另一回事了。。别看是个简单的插面包板，实际做起来各种BUG简直蛋都疼了。。</p><p>至于失真问题，毕竟还要考虑到成本，不能上太好的材料，凑合应付就完事啦哈哈o(<em>￣▽￣</em>)ブ</p><h1 id="电路概览"><a href="#电路概览" class="headerlink" title="电路概览"></a>电路概览</h1><p><img src="https://img.techfens.com/i/static/dianlugaoqing1.png"></p><h1 id="输出波形预览"><a href="#输出波形预览" class="headerlink" title="输出波形预览"></a>输出波形预览</h1><p><strong>XCS1 :</strong></p><p>此示波器显示的波形从上至下分别是：</p><ul><li>三角波</li><li>方波</li><li>正弦波</li></ul><p><img src="https://img.techfens.com/i/static/boxing1.gif" alt="三种波形产生"></p><p><strong>XCS2 ：</strong></p><p>此示波器显示的是正弦波的放大波形。</p><p><img src="https://img.techfens.com/i/static/fangda1.gif" alt="正弦波的放大波形"></p><h1 id="部分重要原件的作用"><a href="#部分重要原件的作用" class="headerlink" title="部分重要原件的作用"></a>部分重要原件的作用</h1><h2 id="运算放大器"><a href="#运算放大器" class="headerlink" title="运算放大器"></a>运算放大器</h2><p>741运放是个相当常用的运放器了，拥有反相和非反相两个输出端，由输入端输入欲被放大的电流或电压信号，经放大后由输出端输出。<strong>放大器作动时的最大特点为需要一对同样大小的正负电源</strong>，其值由±12Vdc至±18Vdc不等，一般使用±15Vdc的电压，我做仿真和实验的时候用的是±12Vdc。</p><p><img src="https://img.techfens.com/i/static/4758093_3.jpg" alt="实物图"></p><p><img src="https://img.techfens.com/i/static/4758093_4.jpg" alt="引脚图"></p><p><img src="https://img.techfens.com/i/static/4758093_1.jpg" alt="运算放大器内部等值电路图"></p><p>具体连接方式可参考我的仿真电路图。</p><p>为啥要选这款运放呢，当然是因为他便宜又好买啊！ <del>（就是比较容易烧了）</del></p><h2 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h2><p>2N2222 / 2N2222A 是一小功率<code>NPN</code>三极管。</p><p><img src="https://img.techfens.com/i/static/20210302233833.png" alt="外形"></p><table><thead><tr><th><strong>参数 管脚</strong></th><th><strong>符号</strong></th><th>2N2222</th><th>2N2222A</th><th><strong>单位</strong></th></tr></thead><tbody><tr><td>集电极-发射极电压</td><td>VCEO</td><td>30</td><td>40</td><td>V</td></tr><tr><td>集电极-基极电压</td><td>VCBO</td><td>60</td><td>75</td><td>V</td></tr><tr><td>发射极-基极电压</td><td>VEBO</td><td>5</td><td>6</td><td>V</td></tr><tr><td>集电极电流-连续</td><td>Ic</td><td>600</td><td>600</td><td>mA</td></tr><tr><td>器件耗散  @ TA = 25℃</td><td>PD</td><td>625</td><td>625</td><td>mW</td></tr><tr><td>操作和存储结温范围</td><td>TJ,Tstg</td><td>–55 to +150</td><td>–55 to +150</td><td>℃</td></tr></tbody></table><p>最重要是很便宜 而且挺稳定的。</p><h2 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h2><p><img src="https://img.techfens.com/i/static/dianrong11.png" alt="电容"></p><ul><li>C1：  阻容耦合产生电路与放大电路</li><li>C2：  积分反馈电容，产生方波</li><li>C3 &amp; C4 :   积分电路，产生正弦波</li><li>C5：  阻容耦合两个共射放大电路</li><li>C6：  防止失真<strong>（此电容过低会显著失真）</strong></li><li>C7：  控制放大倍数，平衡失真</li></ul><p>电容值仅具有一定的参考意义，这也是凑合着调出来的，真正做实验的时候可以根据现有材料适当调整。</p><h2 id="电位器"><a href="#电位器" class="headerlink" title="电位器"></a>电位器</h2><p>比较重要的电阻用电位器代替，方便大家调试和观察电路变化。</p><p><img src="https://img.techfens.com/i/static/dianweiqi.png" alt="电位器"></p><ul><li>R21：  控制三波形产生电路<strong>输出幅度</strong></li><li>R22：  控制三波形产生电路<strong>输出频率</strong></li><li>R23：  控制正弦波放大电路<strong>输出幅度</strong></li></ul><p>至于其他的电阻作用有兴趣的可以自行了解，大多数都是用于分压，电阻值也是随便凑得，能用就行，实际上手操作的时候可以根据手头有的材料自行调整。</p><h1 id="仿真文件"><a href="#仿真文件" class="headerlink" title="仿真文件"></a>仿真文件</h1><p>本渣用的是<code>multisim 14.0</code>，如果你的版本过低打开我的文件可能会出BUG。</p><p>希望能帮助到跟我一样苦逼工科狗们，或许我的学弟学妹们需要呢o(<em>￣▽￣</em>)ブ</p><div class="btn-center"><a class="btn-beautify outline blue larger" href="https://wwa.lanzous.com/iMRrZmeb3fa" title="下载链接"><i class="far fa-hand-point-right"></i><span>下载链接</span></a></div><div class="btn-center">解压密码：techfens.com </div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 电路仿真 </tag>
            
            <tag> 电子技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学考试速成课全系列视频分享，保你期末不挂科！</title>
      <link href="posts/buguake.html"/>
      <url>posts/buguake.html</url>
      
        <content type="html"><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><div class="note danger simple"><p>本文内容禁止以任何形式转载！</p></div><div class="note success simple"><p>有条件的同学还望可以支持正版课程！</p></div><div class="tabs" id="正版课程购买"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#正版课程购买-1">高数叔</button></li><li class="tab"><button type="button" data-href="#正版课程购买-2">猴博士</button></li><li class="tab"><button type="button" data-href="#正版课程购买-3">高斯课堂</button></li><li class="tab"><button type="button" data-href="#正版课程购买-4">斐多课堂</button></li><li class="tab"><button type="button" data-href="#正版课程购买-5">学霸戴你飞</button></li><li class="tab"><button type="button" data-href="#正版课程购买-6">鲜枣课堂</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="正版课程购买-1"><p><strong>高数叔正版课程购买</strong>：</p><p><a href="https://shop41479403.m.youzan.com/wscshop/showcase/feature?alias=b07RFx975s&amp;reft=1586507530046&amp;spm=f.81187957">https://shop41479403.m.youzan.com/wscshop/showcase/feature?alias=b07RFx975s&amp;reft=1586507530046&amp;spm=f.81187957</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正版课程购买-2"><p><strong>某博士正版课程购买：</strong></p><p><a href="https://www.icourse163.org/topics/houboshimooc_kysp/#m-module-box-2">https://www.icourse163.org/topics/houboshimooc_kysp/#m-module-box-2</a></p><p>由于版权问题，不再公开提供某博士相关资料，请支持购买正版课程 谢谢理解！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正版课程购买-3"><p><strong>高斯课堂正版课程购买：</strong></p><p><a href="https://m.study.163.com/provider/400000000275001/index.htm">https://m.study.163.com/provider/400000000275001/index.htm</a></p><p>（不吹不黑，高斯课堂yyds，绝对是速成课里面讲的最均衡的）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正版课程购买-4"><p><strong>斐多课堂不挂科正版课程购买：</strong></p><p> <a href="https://www.phaedoclasses.com/index">https://www.phaedoclasses.com/index</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正版课程购买-5"><p><strong>学霸戴你飞不挂科正版课程购买：</strong></p><p><a href="https://study.163.com/provider/400000000592070/course.htm?share=2&amp;shareId=400000000592070">https://study.163.com/provider/400000000592070/course.htm?share=2&amp;shareId=400000000592070</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="正版课程购买-6"><p><strong>鲜枣课堂速成课正版课程购买：</strong></p><p><a href="https://study.163.com/provider/1027243570/course.htm">https://study.163.com/provider/1027243570/course.htm</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>本人平时也不过是摸鱼怪一枚，属于那种日常不咋听课，一到考试就拼命找各种佛脚抱的当代恶臭带学生。</p><p>这些资料都是我临考前绞尽脑汁从各个地方挖来的，有些是真金白银买的，有的是找大佬要的，这种明明还有几天就考试但是现在还是亿头雾水无穷下手的感觉，我相信能有缘来到我这个小破站的道友大多都感受过这种渡劫的痛苦吧。。。</p><p>希望能挖来我这个小破站的道友们，都能在期末考这个大关上少走弯路，祝渡劫成功，逢考必过！！！！</p><h1 id="观看链接"><a href="#观看链接" class="headerlink" title="观看链接"></a>观看链接</h1><p><strong>20.23-2-13 10:00：上游崩了，所有线路暂时无法使用，正在加急修复，有急需资料的可以先私聊联系我</strong></p><p>重构之后解决了一些问题，比如视频黑屏，iOS设备无法播放等。并小小的移植了一个评论系统，方便大家观看的时候把遇到的问题及时反馈。</p><div class="btn-center"><a class="btn-beautify outline orange larger" href="http://1.15.156.125:5238/aliyun" title="国内线路"><i class="far fa-hand-point-right"></i><span>国内线路</span></a><a class="btn-beautify outline pink larger" href="https://pan.techfens.com/aliyun" title="国外线路"><i class="far fa-hand-point-right"></i><span>国外线路</span></a></div><h2 id="网盘与赞助"><a href="#网盘与赞助" class="headerlink" title="网盘与赞助"></a>网盘与赞助</h2><p>当然，如果你确实有保存到网盘或批量下载的需要，可以通过下方评论区或者直接发邮件私信我，我会将你需要的网盘链接发至你的邮箱！</p><p>或者你可以选择到<code>爱发电</code>赞助我一杯快乐水，一是也算是帮我维护一下服务器的收支平衡，二是也为后面购买新课程做经费，赞助任意金额后，请留意<code>爱发电</code>的<strong>私信</strong>。</p><p>赞助完全自愿！并且本人承诺所有赞助的金额都只会用于支持正版课程和维护服务器！</p><div class="btn-center"><a class="btn-beautify orange larger" href="https://afdian.net/@fenski" title="爱发电赞助"><i class="far fa-hand-point-right"></i><span>爱发电赞助</span></a></div><h2 id="新课报销"><a href="#新课报销" class="headerlink" title="新课报销"></a>新课报销</h2><p>如果有需要的课程，但自行无力承担，可以<strong>找我用大家赞助的快乐水基金报销，并将资料共享给其他需要的同学们</strong>，让我们一起将挂科从这个地球上抹去！欢迎有需要的同学评论区留言！</p><p><em>（报销规则：按照一定的比例，一般在30%~50%之间报销。以具体课程售价为参考）</em></p><p>对于新赞助购买的课程，为了防止资源被恶意倒卖，将在课程的目录下设置密码，并不上架至网盘分享链接，保护期限按需求来定。至于密码的获取方式会在文件夹中说明。</p><h2 id="关于本页"><a href="#关于本页" class="headerlink" title="关于本页"></a>关于本页</h2><p>受限于服务器压力以及各种乱七八糟的举报，倒卖，攻击行为，无条件的公开分享始终不是长久之计。我希望有限的资源可以帮助到一些真正有需要的同学，因此决定小设门槛，希望大家理解。<strong>部分有争议的课程也从公开链接中下架，不再公开分享，包括但不限于某博，某堂等。</strong>若确有需要，请到爱发电私信或到发邮件。</p><p>本人一不求财，二不求名，本站不是什么资源站，既无备案，更无推广，本页建立的初衷也不过只是希望可以卷死那些二道贩子，一分钱都不要让二手贩子挣着。我希望每一个来到我这里的人都保持一定的原则，获取这些课程的方式只有两种：</p><ol><li> 到正版官方网站购买课程或与人合买课程</li><li> 先从我这里白嫖，待考试渡劫成功后，再考虑补票入正 </li></ol><p>我相信确实不是每个大学生都有充足的资金去购买所有的速成课， 就像我曾经也嫖过不少的盗版游戏一样，但是如果这门课程真的给到了你巨大的帮助，请不要感谢我，请用你的钱去支持正版课程，还望各位吃水不忘挖井人！</p><h1 id="课程横向比较"><a href="#课程横向比较" class="headerlink" title="课程横向比较"></a>课程横向比较</h1><p>以下仅作主观参考，课程各有优劣，个人评价不代表课程真实质量，不喜勿喷。</p><table><thead><tr><th align="left"></th><th align="center">蜂考高斯课堂</th><th align="center">高数叔速成课</th><th align="center">斐多课堂</th><th align="center">学霸戴你飞</th><th align="center">高数帮</th><th align="center">鲜枣课堂</th></tr></thead><tbody><tr><td align="left">速通优先级</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐⭐</td><td align="center">是真的长</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐</td><td align="center">⭐⭐</td></tr><tr><td align="left">质量优先级</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐⭐</td></tr><tr><td align="left">板书清晰度</td><td align="center">⭐⭐⭐</td><td align="center">部分极差</td><td align="center">⭐⭐⭐</td><td align="center">笔记潦草</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐⭐</td></tr><tr><td align="left">上手容易度</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐</td><td align="center">⭐⭐</td><td align="center">⭐⭐⭐</td><td align="center">念PPT</td><td align="center">⭐⭐⭐</td></tr><tr><td align="left">考点命中率</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐⭐</td><td align="center">知识过多</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐⭐</td><td align="center">⭐⭐</td></tr><tr><td align="left">课程售价</td><td align="center">💰💰</td><td align="center">💰💰</td><td align="center">💰💰💰</td><td align="center">💰💰💰</td><td align="center">💰💰💰</td><td align="center">单课199</td></tr><tr><td align="left">综合评价</td><td align="center">👍👍👍</td><td align="center">👍👍</td><td align="center">👌</td><td align="center">👍👍</td><td align="center">👍👍</td><td align="center">👍👍</td></tr></tbody></table><p><img src="https://img.techfens.com/i/static/smRSns.jpg"></p><p>还是要谢谢各位的支持，大家期末如果过了，记得来我这里还愿呀！哈哈o(<em>￣▽￣</em>)ブ</p><p>PS. 还请各位不要在任何<strong>公开环境</strong>宣传本网盘以及本页面了，这不是一个盈利项目，个人技术水平还没到可以撑起一个高并发负载场景的水平，服务器炸了就只能靠限流了，实在是没有办法，给各位道个歉了。</p><details class="toggle"><summary class="toggle-button" style="">科目更新日志 【最后更新：2023-02-11】</summary><div class="toggle-content"><ul><li>2023-02-11更新：高数帮《随机信号》《机器学习》《数字图像处理》《汽车构造》等8门课</li></ul><details class="toggle"><summary class="toggle-button" style="">老日志归档</summary><div class="toggle-content"><ul><li>2020-04-10更新 ： 本页建立 </li><li>2020-08-17更新 ： 高数叔《数字电路》《模拟电子技术》《大学物理精讲课》</li><li>2020-09-22更新 ： 高斯课堂 重磅加入各个学科，《高等数学》上下册高斯课堂精讲课，《工程制图》，《信号与系统》</li><li>2020-11-24更新 ： 斐多课堂 《单片机》《复变函数》《信号与系统》等九门科 </li><li>2020-12-12更新 ： 高斯课堂 《离散数学》</li><li>2020-12-26更新 ： 斐多课堂 《数字信号处理》《数据结构》</li><li>2021-01-08更新 ： 高数叔 《模拟电子技术》《数据结构》《工程制图》</li><li>2021-02-01更新 ： 学霸戴你飞《信号与系统》</li><li>2021-04-24更新 ： 高斯课堂 《信号与系统》《数据结构》 </li><li>2021-05-19更新 ： 高斯课堂 《统计学》 </li><li>2021-05-26更新 ： 学霸戴你飞 课程讲义  </li><li>2021-06-01更新 ： 高斯课堂《电路理论基础》2021新版课程 </li><li>2021-06-06更新 ： 学霸戴你飞20小时精通高数上精讲课 </li><li>2021-06-07更新 ： 高数叔《自动控制原理》</li><li>2021-06-10破产更新 ： 鲜枣课堂 《通信原理》《信号与系统》，<del>X博士 《机械原理》（由热心同学赞助）</del>，学霸戴你飞《通信原理》， 斐多课堂《通信原理》 《电磁场与电磁波》</li><li>2021-06-14更新 ： X博士 《模拟电子技术》2021新版（由热心同学赞助）~~</li><li>2021-06-15更新 ： 高斯课堂 《高等数学》下2021新版课程（由热心同学赞助）</li><li>2021-06-20更新 ： 修复部分播放出错的视频</li><li>2021-08-31更新 ： 一些计算机，软考，建造师等考证课程（由热心同学赞助）</li><li>2021-09-02更新 ： 一些四六级考试资料，并在公开分享链接中删除一些有争议的课程</li><li>2021-09-14更新 ： 增加《结构力学》《流体力学》《自动控制原理》《计算机网络》等8门课程</li><li>2021-09-21更新 ： 高斯课堂《物理化学》，增加部分计算机课程，教资课程等</li><li>2021-10-20更新：  高数帮《电力电子技术》</li><li>2021-11-16更新：  高数帮《微机原理》（感谢热心同学的资料共享）</li><li>2021-11-17更新：  重新按照更合理的分类进行排版，修复了《单片机》《复变函数》等六门课程的资源缺漏问题，感谢大家的反馈</li><li>2021-12-06更新：  学霸戴你飞《电力电子技术》，大学答案君《电力系统分析》，优化了移动端播放视频的体验 </li><li>2021-12-09更新：  高斯课堂《自动控制原理》</li><li>2021-12-11更新：  高数帮《单片机原理》（C51）</li><li>2021-12-21更新：  高斯课堂数电，模电，线代，高数等10门系统课（十分感谢赞助者的支持）</li><li>2021-12-24更新：  高数帮《单片机原理》（汇编）</li><li>2022-02-24更新：  高斯课堂《结构力学》，《机械工程基础》</li><li>2022-02-25更新：  洪智咨询部《机械工程测试技术》《互换性测量》等5门课</li><li>2022-03-01更新：  高斯课堂《机械设计基础》《电工学》</li><li>2022-03-02更新：  高斯课堂《C语言》高清重制</li><li>2022-03-09更新：  高数帮《机械制造基础》</li><li>2022-05-11更新：  计组，数据库，高频电路等九门课</li><li>2022-05-31更新：  洪智咨询部《机械原理》<del>（机械？寄械！）</del>，宏观经济学</li><li>2022-06-02更新：  高数帮《财务管理》，《互换性与技术测量》，《控制工程基础》等10门课程</li><li>2022-06-07更新：  新开土建工程大类，并补充了《土力学》《传热学》《工程测量学》《工程热力学》等几门课</li><li>2022-06-07更新：  高数帮《工程光学》《传感器与测试技术》</li><li>2022-06-18更新：《成本会计学》《思修》《马原》《毛概》《近现代史》《解析几何》《数学分析》《编译原理》《C++》《Java》《Python》《机械制造工艺学》《化工原理》《有机化学》《钢结构》《混凝土》《管理学》《金融学》《审计学》《AutoCAD》等</li><li>2022-09-16更新：  项目重构（但是失败了一半），增加了一些高斯课堂的系统精讲课程</li><li>2022-10-20更新：《电机学》相关课程，《控制工程基础》，并补全了一些课件</li><li>2022-10-20更新：《电机学》相关课程，《控制工程基础》，并补全了一些课件</li><li>2022-11-06更新：学霸《单片机》汇编和硬件部分，四六级相关课程</li><li>2022-11-14更新：学霸《自动控制原理》《现代控制理论》《计算机控制技术》等，高斯《信号与系统》高分系统课，《英语六级》速成课等</li><li>2022-11-14更新：高数帮《高分子化学》</li><li>2022-12-06更新：高数帮《Matlab》快速入门</li><li>2022-12-10更新：高数帮《电气控制与PLC》</li></ul></div></details><p><strong>此项目仅为公益项目，加上本人的精力财力有限，目前只有整理速成课的计划。各大精讲课，考研课的整理难度过大，我或许会考虑在长假期更新，但是近期确实是没有这方面打算，希望各位理解一下，我也不是万能的呜呜呜/(ㄒoㄒ)/~~</strong></p></div></details>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网的主流协议大对比！这里面有你在使用的吗？</title>
      <link href="posts/kexueshangwang.html"/>
      <url>posts/kexueshangwang.html</url>
      
        <content type="html"><![CDATA[<div class="note danger simple"><p>叠个 BUFF ，本文章不涉及和讨论任何政治内容！</p></div><div class="note warning simple"><p>本文不提供详细的搭建教程，仅对各协议进行分析！本人非专业人士，部分内容来自互联网，文章已不作更新，部分技术存在较大代差，仅供参考</p></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么需要科学上网？"><a href="#为什么需要科学上网？" class="headerlink" title="为什么需要科学上网？"></a>为什么需要科学上网？</h2><p>千言万语汇成一句话，那就国内中文互联网的信息密度实在是太 TM 低了。</p><p>以我所在的计算机领域来说，科学上网几乎是每一个想要进修的程序员的必备技能。科学上网的用途包括但不限于：</p><ul><li>精确的在外网搜爬自己需要的资料，加速下载服务器位于国外的软件和项目</li><li>上油管等学习外网博主的经验教程，使用Facebook，Twitter等社交工具吃国际瓜</li><li>享受正版该有的体验，追剧，Netflix，Hulu，HBO，iPlayer 等，也包括亚马逊</li><li>享受国外免费高质量的教育和公共资源，尽量保持自己和国际节奏同步</li><li><del>偶尔也看看小黄片</del></li></ul><p>常年用Baidu + youku 和常年用Google + youtube 的人，所接受到的信息，所获得的眼界，是完全不在一个量级上的。</p><p>在微信，QQ这些微博这些平台你只能人生吞气，</p><p>至于国内的中文互联网信息密度到底有多低，我这随便举个简单的例子：</p><p><img src="https://img.techfens.com/i/static/search-demo.png" alt="在百度和谷歌上同样搜索一个问题">百度上搜出来的结果前五个有三个是CSDN的内容，我简直***了，来让我们打开推荐的第一个看一下</p><p><img src="https://img.techfens.com/i/static/1613116590287.png" alt="1613116590287"></p><p>不难想象我当时的心情到底有多难受。除开这个，剩下的那些CSDN的内容也大都是灌水，复制粘贴，一搜几十个答案打开都是一模一样的。</p><p>国外办事收钱，国内收钱办事。<strong>某些平台和企业依靠着信息垄断一边享受着开源的红利，一边吸光开源的血，把人当耗材的后果就是环境的彻底崩塌</strong></p><h2 id="对科学上网的看法"><a href="#对科学上网的看法" class="headerlink" title="对科学上网的看法"></a>对科学上网的看法</h2><p>还是那句话，有墙不一定是坏事，没墙不一定是好事。</p><p>烂的是国内的中文互联网，大家也不要把怨气全撒在墙上，墙只是一个工具，是一项政策，各位可以讨厌它，但还希望可以给它基本的尊重，我们翻出去，找到自己需要的东西，收好就可以了。</p><p>说句好听的，在大环境带墙的情况下，能出来的各位都是《特权阶级》，不要一边吃饭一边摔碗。</p><p>这个世界上没有密不透风的墙，也没有永恒不倒的梯子，墙和梯子的关系是微妙的，梯子更像是一个准入门槛，而不是漏洞，很多时候不过是睁一只眼闭一只眼罢了。</p><p><img src="https://img.techfens.com/i/static/20210321212708.png" alt="1613118056119"></p><h1 id="主流协议介绍"><a href="#主流协议介绍" class="headerlink" title="主流协议介绍"></a>主流协议介绍</h1><p>本文会按照一定的时间发展顺序介绍主流的阔学上网协议。VPN与代理服务器有着本质的区别，两者工作的层次并不在一个层次，因此我选择分开介绍。</p><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p>首先应该明白的一点就是，VPN技术本身并不是专门用于过墙访问外网的。该技术成熟已久，至今仍有着活跃的优化，仍有不少的大公司企业选择它作为加密通讯协议，在商业上有着广泛的应用，因此目前想彻底封杀几乎还是不可能的。对于那些非技术向的，不想折腾麻烦，仅仅是偶尔是有梯子需求的人来说，成熟的VPN软件确实有很不错的体验，毕竟掏钱就行。</p><p>至于缺点嘛，十分明显，不稳定，而且贵。每年高压期，开会的那段时间几乎必死，而且现在活着的VPN供应商基本消逝殆尽了，仅剩下的几个VPN大供应商，比如 <a href="https://indx.cc/exp">ExpressVPN</a> 等等，他们现在还能用不是因为技术高，而是他们手里的IP多到可以和墙正面硬刚。（非广告）</p><p>能看到我这篇文章的朋友，应该大部分都不是VPN的目标客户。在你们眼里，VPN可能已经是一项不推荐也不会使用的梯子技术，但是根据我的调查，VPN的用户数量仍占据着相当大的比例，他们是互联网中「沉默的大多数」，对梯子的要求也就是几天一个星期出去查查资料，或者试图去寻找某些学习资料。VPN的易用性使得这仍旧是大部分对网络接触不深，没有搭建技术的人群过墙的首选。</p><p>那VPN就真的一无是处吗？还真不是。大家看看下面这张图。<strong>TCP/IP五层协议和OSI的七层协议对应关系如下：</strong></p><p><img src="https://img.techfens.com/i/static/705728-20160424234825491-384470376.png" alt="img"> </p><p> 在每一层实现的协议也各不同，即每一层的服务也不同.下图列出了每层主要的协议。 </p><p><img src="https://img.techfens.com/i/static/705728-20160424234827195-1493107425.png" alt="img"> </p><p>VPN相对于Socks5代理的方式在原理上还是有一定优势的，VPN的工作模式无限接近于底层，能实现真正意义上的全局代理，其中一些socks5不转发的流量也是全部转发，<strong>包括ARP，DHCP，ICMP等</strong>。这意味着相当于是在你的电脑上虚拟了一张网卡，在第三方眼中，你的IP就是VPN的IP，现在大多数的游戏加速器因此也都是通过VPN的技术来实现的。</p><h3 id="IPsec"><a href="#IPsec" class="headerlink" title="IPsec"></a>IPsec</h3><p>IPsec协议可以说是历史悠久，可以说自1990年代末以来，大多数主流（和其他）操作系统中都包括IPsec支持，其中包括台式机和服务器操作系统以及路由器和其他网络安全设备。 </p><p>IPSec有两种工作模式：</p><p><strong>隧道（tunnel）模式：</strong>用户的整个IP数据包被用来计算AH或ESP头，AH或ESP头以及ESP加密的用户数据被封装在一个新的IP数据包中。通常，隧道模式应用在两个安全网关之间的通讯。</p><p><strong>传输（transport）模式：</strong>只是传输层数据被用来计算AH或ESP头，AH或ESP头以及ESP加密的用户数据被放置在原IP包头后面。通常，传输模式应用在两台主机之间的通讯，或一台主机和一个安全网关之间的通讯。</p><p><img src="https://img.techfens.com/i/static/IPsec.png" alt="IPSEC"></p><p>由于IPsec协议实在是过于古老，此处全当做个引子，如果大家不是网络行业工作者，其实没有必要了解太深。</p><h3 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h3><p>大名鼎鼎的<code>OpenVPN</code>，此项目最初于2001年发布，由James Yonan编写。与其他基于<code>IPSec</code>的隧道协议不同，<code>OpenVPN</code>依靠<code>SSL / TLS</code>进行身份验证和加密，创建安全的点对点连接。SSL加密还是很信得过的，目前被广泛用于保护金融交易，数据传输，电子邮件等。</p><p><code>OpenVPN</code>与当今使用的大多数操作系统兼容。支持<code>TCP</code>或<code>UDP</code>并支持高达256位的加密，最重要他是开源的！！这确实使得它有很好的拓展性，但是也由于开源的特性，容易被墙抓住特性。</p><p>现在大多数的游戏加速器和一些VPN供应商都是采用<code>OpenVPN</code>的协议搭建的，然而我认为用<code>OpenVPN</code>来过墙就实在是屈才了，我认为他更大的用处是在于底层转发流量和数据强加密的特性。</p><p>相对与过墙，我还是在各种各样的灰色产业里面见到OpenVPN更多，比如免流，IPV6绕WIFI验证，过校园网认证等等。</p><h3 id="WireGuard"><a href="#WireGuard" class="headerlink" title="WireGuard"></a>WireGuard</h3><p><code>WireGuard</code> 是由 <code>Jason Donenfeld</code> 等人用 <code>C</code> 语言编写的一个开源VPN协议，被视为下一代VPN协议，旨在解决许多困扰 <code>IPSec/IKEv2</code>、<code>OpenVPN 或 </code>L2TP 等其他 威屁恩 协议的问题。它与 <code>Tinc</code> 和 <code>MeshBird</code> 等现代 VPN <!--其余类型的VPN协议可以自行去了解-->有一定相似之处，即加密技术先进、配置简单。从 2020 年 1 月开始，它已经并入了 Linux 内核的 <code>5.6</code> 版本，这意味着大多数 Linux 发行版的用户将拥有一个开箱即用的 WireGuard。 </p><p><code>WireGuard</code>作为最新开发的VPN协议，比目前主流的VPN技术有明显优势，被称为下一代VPN。<code>WireGuard</code>有如下特点：</p><p><strong>优点：</strong></p><ul><li>配置精简，可直接使用默认值</li><li>只需最少的密钥管理工作，每个主机只需要 1 个公钥和 1 个私钥。</li><li>就像普通的以太网接口一样，以 Linux 内核模块的形式运行，资源占用小。</li><li>能够将部分流量或所有流量通过 威屁恩 传送到局域网内的任意主机。</li><li>能够在网络故障恢复之后自动重连，戳到了其他 威屁恩 的痛处。</li><li>比目前主流的 VPN 协议，连接速度要更快，延迟低。</li><li>使用了更先进的加密技术，具有前向加密和抗降级攻击的能力。</li><li>支持任何类型的二层网络通信，例如 <code>ARP</code>、<code>DHCP</code> 和 <code>ICMP</code>，而不仅仅是 <code>TCP/HTTP</code>。</li><li>可以运行在主机中为容器之间提供通信，也可以运行在容器中为主机之间提供通信。</li></ul><p><strong>不足：</strong></p><ul><li>处于研发初期，各种功能及支持有待完善。</li><li>由于使用<code>UDP</code>协议，BBR、锐速等TCP网络加速工具，对<code>WireGuard</code>无效。</li><li>部分运营商可能会对UDP协议进行QOS限速，<code>WireGuard</code>会受到一定影响。</li><li>客户端分流功能较弱，对GFWList的支持不足。</li></ul><p>说了这么一大堆，其实<code>WireGuard</code> 就是采用UDP转发流量的 VPN 工具。他最大的优点也就是最大的缺点，采用UDP转发流量确实是能够有效的干扰墙的封锁，但是其稳定性实在是不敢恭维。他能用不代表你应该去用，<code>WireGuard</code> 能活到现在很大原因是用的人实在是太少了。。</p><p>我不是想表达<code>WireGuard</code> 不好，而是他的作用不应该是用来过墙。</p><p>相比起OpenVPN这种动辄十万行代码的大项目，<code>WireGuard</code> 这种只有4000多行代码的代码库，简直就像是一个艺术品。</p><h2 id="socks5"><a href="#socks5" class="headerlink" title="socks5"></a>socks5</h2><p>想要长期稳定高效的科学上网，socks5类型的代理基本是必须要掌握的。</p><p>socks5类型的代理服务器在网络层级上是工作于应用层的会话层，很多流量都无法代理，因从即便是开了所谓的全局，也不能给游戏加速，毕竟游戏的网络传输一般都是跑在传输层的。像Ping和Trace这些ICMP命令自然也是无法通过代理的。（当然也有方法可以用软件强制接管虚拟网卡达到真全局的目的，比如<code>SSTAP</code>，<code>tun2socks</code>等等）</p><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><p><code>shadowsocks</code> 可以说是继VPN被墙能准确识别并封锁后，后面的一切代理服务器中转的方式的祖师爷。</p><p><code>shadowsocks</code>开发之初就是为了过墙，实现原理简单粗暴，直捣黄龙，写程序的角度看就是直接奔着解决问题去的。</p><p>有不少人都说<code>shadowsocks</code>已经能被墙准确识别，毕竟就连<code>ss</code>的作者也都被请去喝茶了，而作为第一代的代理程序，很多漏洞没有得到较好的修复，导致墙已经能准确的识别出<code>ss</code>的流量特征。</p><p>但是目前就我所知道的来说，除开一开始有一定非AEAD加密数据被准确识别的BUG外（已修复），我并没有确切的得到<code>ss</code>已被确切封锁的实质性证据，大多数人跟着锤<code>shadowsocks</code>都是因为自己的服务器太过猖狂然后被封了，<strong>实际上墙的封锁机制极其复杂，检测机制包括但不限于IP段，判断流量头，端口，数据量大小，还有人工干预等等</strong>，这口锅并不能完全推到<code>ss</code>上。</p><p><code>shadowsocks</code>引出了一个把代理服务器拆分成本地和远程两个的概念，实现了经过墙的流量全部加密，完美的规避了之前VPN仍保留一部分明文通讯的特征缺点。</p><p><img src="https://img.techfens.com/i/static/1613197495682.png" alt="1613197495682"></p><p><img src="https://img.techfens.com/i/static/1613196983045.png" alt="1613196983045"></p><p>和VPN最大的不同就是，VPN是先发送一个建立加密通道的明文数据包，套路固定，特征明显，而<code>shadowsocks</code>则是在本地先加密完成后，再发送至代理服务区，过墙期间数据完全加密，特征不明显。</p><p>另外，<code>shadowsocks</code>拥有着目前socks5代理类型里的最快的通讯延迟（RTT），因为数据包握手的时间最短。</p><p>就目前来说，<code>shadowsocks</code>还是目前体验最好，最简单快速，最极度体现暴力美学的中转代理方式。</p><h3 id="ShadowsocksR"><a href="#ShadowsocksR" class="headerlink" title="ShadowsocksR"></a>ShadowsocksR</h3><p>SSR是<code>shadowsocks</code>的优化版，但是作者不是同一个。</p><p>在ss作者被喝茶之后，github上出现了一个叫breakwa11(破娃)的帐号，声称ss容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容ss，改进后的项目叫<code>shadowsocks-R</code>，简称<code>ssr</code>，然后ss用户和ssr用户自然分成了两个派别，互相撕逼，直到有一段时间，破娃被人肉出来，（一说是破娃的朋友被人肉出来——退而结网注）无奈之下删除了ssr的代码，并且解散了所有相关群组。 </p><p>我个人认为没有必要纠结是用ss还是ssr。如果你是机场用户，ss无疑是最优选，毕竟体验最好，封了也跟你没关系。</p><h3 id="VMess"><a href="#VMess" class="headerlink" title="VMess"></a>VMess</h3><p><code>Vmess</code> 是基于V2Ray内核自研的协议。</p><p>先来介绍一下<code>V2Ray</code>这个极具弹性平台吧。和之前的VPN和<code>Shadowsock</code>类型不同的一点就是，<code>V2Ray</code>是一个内核，他不是单独运行的，这是一个框架，对开发者来说更加自由。</p><blockquote><p>自2020年6月以来，<code>V2Ray</code>平台就爆出了一些很不安全的BUG，建议大家尽快更换到Xray内核，或者更换协议！</p></blockquote><p>V2Ray就像叠积木，一笔一划的慢慢逐步把梯子叠出来，对于技术力十分入门的小白来说可能不是太友好，而且V2Ray平台上的套娃严重，V2Ray可以下面这样用：</p><ul><li>vmess</li><li>vmess + tls</li><li>vmess + websocket + tls</li><li>vmess + websocket + tls + Nginx</li><li>vmess + websocket + tls + Nginx + cloudfare（CDN）</li></ul><p>从上至下，一层层套娃，套的越多越安全，当然速度也就越慢。如果真的从头搭建起来，那就真是令人头都大了，还好有大神开发一键脚本，有兴趣的朋友自行搜索。</p><h3 id="VLess"><a href="#VLess" class="headerlink" title="VLess"></a>VLess</h3><p>可以理解为 <code>VLess</code> 是<code>VMess</code>轻量版，<code>VLESS</code> 是一个无状态的轻量传输协议，它分为入站和出站两部分，可以作为 <code>V2Ray</code> 客户端和服务器之间的桥梁。</p><p>与 <code>VMess</code> 不同，<code>VLESS</code> 不依赖于系统时间，认证方式同样为 <code>UUID</code>，但不需要 <code>alterId</code>。</p><p>同样的，和 <code>VMess</code> 一样，即支持 <code>V2Ray</code>，也支持最新的<code>XRay</code>。一样可以套娃</p><ul><li>vless</li><li>vless + tls</li><li>vless + websocket + tls</li><li>vless + websocket + tls + web</li><li>vless + websocket + tls + web + cloudfare（CDN）</li></ul><h3 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h3><p>根据官网给出的解释，<code>Trojan</code>的设计理念与传统协议的设计理念相反，<code>Trojan</code>不使用强加密和随机模糊，而是直接模仿互联网最常见的协议<code>HTTPS</code>，以此来达到设计的目的。  <img src="https://img.techfens.com/i/static/trojan.jpg" alt="V2Ray / Trojan 传输方式哪个好？"> </p><p>当然，这显然是瞎扯淡。<code>HTTPS</code>协议本身就含有加密，而且<code>TLS 1.3</code>更是强加密，现今无法通过简单方式破解。<code>Trojan</code>本身使用了<code>HTTPS</code>的特性，自带了加密属性，只不过这种加密大家都在用而已，因此官网描述是不准确的。 </p><p>不难发现，若<code>V2Ray</code>使用了<code>WS + TLS</code>方式，其协议与<code>Trojan</code>本身差异并不大。两者建立连接的过程有区别，但是从流量本身，或者说第三者看流量是难以发现区别的。也就是说，对于第三者的监听，这两类协议与普通流量表现均一致，这是两者的共性。 </p><p> 因此，仅从真正使用的流量的传输速度看，<code>Trojan</code>在原理上是一定快于<code>V2Ray</code>的，倒不是<code>Trojan</code>有什么黑科技，而是<code>Trojan</code>比<code>V2Ray</code>更简单，我们可以认为<code>Trojan</code>就是一个只有<code>WS+TLS</code>协议的<code>V2Ray</code>的简化版本（不能简单等同）。这也许就是<code>Trojan</code>的设计理念吧，我认为把<code>Trojan</code>介绍成：<strong>以简单的方法利用互联网最常见、最安全的形式完成连接的一种协议</strong>，这样的介绍或许会更好。 </p><h3 id="Trojan-go"><a href="#Trojan-go" class="headerlink" title="Trojan-go"></a>Trojan-go</h3><p><code>Trojan-go</code> 可以看作是<code>Trojan</code>的加强版，最重要是支持了<code>websocket</code>和<code>多路复用</code>！同时目前也是笔主本人主要使用的科学上网方式，不仅很稳定，而且体验很好。</p><p>支持了<code>websocket</code>的<code>Trojan-go</code>，可以说基本上就是不会死的存在，毕竟支持了<code>websocket</code>后，就可以套用CDN了，隐藏了真实的IP（梦回V2Ray终极套娃版），而且支持了多路复用，显著提升了网页的打开速度。</p><p><code>Trojan</code> 最大的缺点其实也是优点之一，就是用<code>443</code>端口进行输出，这点不管是<code>Trojan</code> 还是 <code>Trojan-go</code> 都是一样的。</p><p>用<code>443</code>端口本来是没有什么问题的，但是很多朋友的服务器不仅仅是用来搭建梯子的，可能还会装个宝塔面板，搭个小网站，或者干些别的事，但是如果用的是<code>Trojan</code>服务，把<code>443</code>端口占了，那别的服务就没有办法运行。</p><p>这里贴上一位大佬的解决思路：<a href="https://www.chengxiaobai.cn/record/trojan-shared-443-port-scheme.html">如何实现Trojan 共用 443 端口方案</a></p><p>如果能成功将<code>Trojan</code>和自己的网站或者其他服务绑起来，使<code>Trojan</code>服务器 有一定的日活IP，那么这将是伪装科学上网的终极形态!</p><h3 id="NaiveProxy"><a href="#NaiveProxy" class="headerlink" title="NaiveProxy"></a>NaiveProxy</h3><p> <code>Naiveproxy</code>从2019年年末初出江湖，到现在也差不多经过10个月的发展了，只是在爆出<code>V2RAY-VMESS</code>的漏洞新闻之后，<code>Naiveproxy</code>才进入了更多人的眼球，并迅速蔓延。 </p><p>其实作者的开发思路很清晰，因为我们使用科学上网协议的混淆、加密的时代已经过去了，很多例子已经证明，混淆本身就会成为一个被攻击或是被审查对象，自己弄的一些加密协议，终归还是敌不过专门研究加密的一些学者所做出的东西。</p><p>所以作者的思路是采用最常用的浏览器的网络堆栈，来躲避墙的审查。因为审查常用的浏览器的网络堆栈代价还是很高很高的，所以这样也就大大降低了我们的节点或是VPS，被阻断或是和被墙的风险。 </p><p>对于<code>Naiveproxy</code>的使用，我个人推荐使用 <code>Naiveproxy + TLS + Caddy </code>来自行搭建，也可以使用 <a href="https://github.com/proxysu/ProxySU">ProxuSU</a> 进行搭建。</p><p><img src="https://img.techfens.com/i/static/1613212001609.png" alt="1613212001609"></p><h3 id="MTProto"><a href="#MTProto" class="headerlink" title="MTProto"></a>MTProto</h3><p>比较少用到，是telegram专用的一款代理软件，有兴趣的朋友可以自行了解。</p><p> <img src="https://img.techfens.com/i/static/2091774458.jpg" alt="多消息作为单个加密"> </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>一条好的线路比纠结协议和优化重要的多，好的协议和优化只是锦上添花，一条稳定的线路才是最核心的根本！</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络技术 </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
